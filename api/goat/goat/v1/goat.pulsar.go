// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package goatv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_BlobsBundle_1_list)(nil)

type _BlobsBundle_1_list struct {
	list *[][]byte
}

func (x *_BlobsBundle_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobsBundle_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobsBundle_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobsBundle_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobsBundle_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobsBundle at list field KzgCommitments as it is not of Message kind"))
}

func (x *_BlobsBundle_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobsBundle_1_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobsBundle_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BlobsBundle_2_list)(nil)

type _BlobsBundle_2_list struct {
	list *[][]byte
}

func (x *_BlobsBundle_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobsBundle_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobsBundle_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobsBundle_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobsBundle_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobsBundle at list field Proofs as it is not of Message kind"))
}

func (x *_BlobsBundle_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobsBundle_2_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobsBundle_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BlobsBundle_3_list)(nil)

type _BlobsBundle_3_list struct {
	list *[][]byte
}

func (x *_BlobsBundle_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BlobsBundle_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_BlobsBundle_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_BlobsBundle_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_BlobsBundle_3_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message BlobsBundle at list field Blobs as it is not of Message kind"))
}

func (x *_BlobsBundle_3_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_BlobsBundle_3_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_BlobsBundle_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BlobsBundle                 protoreflect.MessageDescriptor
	fd_BlobsBundle_kzg_commitments protoreflect.FieldDescriptor
	fd_BlobsBundle_proofs          protoreflect.FieldDescriptor
	fd_BlobsBundle_blobs           protoreflect.FieldDescriptor
)

func init() {
	file_goat_goat_v1_goat_proto_init()
	md_BlobsBundle = File_goat_goat_v1_goat_proto.Messages().ByName("BlobsBundle")
	fd_BlobsBundle_kzg_commitments = md_BlobsBundle.Fields().ByName("kzg_commitments")
	fd_BlobsBundle_proofs = md_BlobsBundle.Fields().ByName("proofs")
	fd_BlobsBundle_blobs = md_BlobsBundle.Fields().ByName("blobs")
}

var _ protoreflect.Message = (*fastReflection_BlobsBundle)(nil)

type fastReflection_BlobsBundle BlobsBundle

func (x *BlobsBundle) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BlobsBundle)(x)
}

func (x *BlobsBundle) slowProtoReflect() protoreflect.Message {
	mi := &file_goat_goat_v1_goat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BlobsBundle_messageType fastReflection_BlobsBundle_messageType
var _ protoreflect.MessageType = fastReflection_BlobsBundle_messageType{}

type fastReflection_BlobsBundle_messageType struct{}

func (x fastReflection_BlobsBundle_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BlobsBundle)(nil)
}
func (x fastReflection_BlobsBundle_messageType) New() protoreflect.Message {
	return new(fastReflection_BlobsBundle)
}
func (x fastReflection_BlobsBundle_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BlobsBundle
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BlobsBundle) Descriptor() protoreflect.MessageDescriptor {
	return md_BlobsBundle
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BlobsBundle) Type() protoreflect.MessageType {
	return _fastReflection_BlobsBundle_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BlobsBundle) New() protoreflect.Message {
	return new(fastReflection_BlobsBundle)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BlobsBundle) Interface() protoreflect.ProtoMessage {
	return (*BlobsBundle)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BlobsBundle) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.KzgCommitments) != 0 {
		value := protoreflect.ValueOfList(&_BlobsBundle_1_list{list: &x.KzgCommitments})
		if !f(fd_BlobsBundle_kzg_commitments, value) {
			return
		}
	}
	if len(x.Proofs) != 0 {
		value := protoreflect.ValueOfList(&_BlobsBundle_2_list{list: &x.Proofs})
		if !f(fd_BlobsBundle_proofs, value) {
			return
		}
	}
	if len(x.Blobs) != 0 {
		value := protoreflect.ValueOfList(&_BlobsBundle_3_list{list: &x.Blobs})
		if !f(fd_BlobsBundle_blobs, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BlobsBundle) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goat.goat.v1.BlobsBundle.kzg_commitments":
		return len(x.KzgCommitments) != 0
	case "goat.goat.v1.BlobsBundle.proofs":
		return len(x.Proofs) != 0
	case "goat.goat.v1.BlobsBundle.blobs":
		return len(x.Blobs) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.BlobsBundle"))
		}
		panic(fmt.Errorf("message goat.goat.v1.BlobsBundle does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobsBundle) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goat.goat.v1.BlobsBundle.kzg_commitments":
		x.KzgCommitments = nil
	case "goat.goat.v1.BlobsBundle.proofs":
		x.Proofs = nil
	case "goat.goat.v1.BlobsBundle.blobs":
		x.Blobs = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.BlobsBundle"))
		}
		panic(fmt.Errorf("message goat.goat.v1.BlobsBundle does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BlobsBundle) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goat.goat.v1.BlobsBundle.kzg_commitments":
		if len(x.KzgCommitments) == 0 {
			return protoreflect.ValueOfList(&_BlobsBundle_1_list{})
		}
		listValue := &_BlobsBundle_1_list{list: &x.KzgCommitments}
		return protoreflect.ValueOfList(listValue)
	case "goat.goat.v1.BlobsBundle.proofs":
		if len(x.Proofs) == 0 {
			return protoreflect.ValueOfList(&_BlobsBundle_2_list{})
		}
		listValue := &_BlobsBundle_2_list{list: &x.Proofs}
		return protoreflect.ValueOfList(listValue)
	case "goat.goat.v1.BlobsBundle.blobs":
		if len(x.Blobs) == 0 {
			return protoreflect.ValueOfList(&_BlobsBundle_3_list{})
		}
		listValue := &_BlobsBundle_3_list{list: &x.Blobs}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.BlobsBundle"))
		}
		panic(fmt.Errorf("message goat.goat.v1.BlobsBundle does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobsBundle) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goat.goat.v1.BlobsBundle.kzg_commitments":
		lv := value.List()
		clv := lv.(*_BlobsBundle_1_list)
		x.KzgCommitments = *clv.list
	case "goat.goat.v1.BlobsBundle.proofs":
		lv := value.List()
		clv := lv.(*_BlobsBundle_2_list)
		x.Proofs = *clv.list
	case "goat.goat.v1.BlobsBundle.blobs":
		lv := value.List()
		clv := lv.(*_BlobsBundle_3_list)
		x.Blobs = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.BlobsBundle"))
		}
		panic(fmt.Errorf("message goat.goat.v1.BlobsBundle does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobsBundle) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.goat.v1.BlobsBundle.kzg_commitments":
		if x.KzgCommitments == nil {
			x.KzgCommitments = [][]byte{}
		}
		value := &_BlobsBundle_1_list{list: &x.KzgCommitments}
		return protoreflect.ValueOfList(value)
	case "goat.goat.v1.BlobsBundle.proofs":
		if x.Proofs == nil {
			x.Proofs = [][]byte{}
		}
		value := &_BlobsBundle_2_list{list: &x.Proofs}
		return protoreflect.ValueOfList(value)
	case "goat.goat.v1.BlobsBundle.blobs":
		if x.Blobs == nil {
			x.Blobs = [][]byte{}
		}
		value := &_BlobsBundle_3_list{list: &x.Blobs}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.BlobsBundle"))
		}
		panic(fmt.Errorf("message goat.goat.v1.BlobsBundle does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BlobsBundle) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.goat.v1.BlobsBundle.kzg_commitments":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobsBundle_1_list{list: &list})
	case "goat.goat.v1.BlobsBundle.proofs":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobsBundle_2_list{list: &list})
	case "goat.goat.v1.BlobsBundle.blobs":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_BlobsBundle_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.BlobsBundle"))
		}
		panic(fmt.Errorf("message goat.goat.v1.BlobsBundle does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BlobsBundle) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goat.goat.v1.BlobsBundle", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BlobsBundle) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BlobsBundle) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BlobsBundle) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BlobsBundle) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BlobsBundle)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.KzgCommitments) > 0 {
			for _, b := range x.KzgCommitments {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Proofs) > 0 {
			for _, b := range x.Proofs {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Blobs) > 0 {
			for _, b := range x.Blobs {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BlobsBundle)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Blobs) > 0 {
			for iNdEx := len(x.Blobs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Blobs[iNdEx])
				copy(dAtA[i:], x.Blobs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Blobs[iNdEx])))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Proofs) > 0 {
			for iNdEx := len(x.Proofs) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Proofs[iNdEx])
				copy(dAtA[i:], x.Proofs[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Proofs[iNdEx])))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.KzgCommitments) > 0 {
			for iNdEx := len(x.KzgCommitments) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.KzgCommitments[iNdEx])
				copy(dAtA[i:], x.KzgCommitments[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.KzgCommitments[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BlobsBundle)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlobsBundle: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BlobsBundle: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field KzgCommitments", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.KzgCommitments = append(x.KzgCommitments, make([]byte, postIndex-iNdEx))
				copy(x.KzgCommitments[len(x.KzgCommitments)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proofs", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proofs = append(x.Proofs, make([]byte, postIndex-iNdEx))
				copy(x.Proofs[len(x.Proofs)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Blobs", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Blobs = append(x.Blobs, make([]byte, postIndex-iNdEx))
				copy(x.Blobs[len(x.Blobs)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ExecutionPayload_14_list)(nil)

type _ExecutionPayload_14_list struct {
	list *[][]byte
}

func (x *_ExecutionPayload_14_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ExecutionPayload_14_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_ExecutionPayload_14_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ExecutionPayload_14_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ExecutionPayload_14_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ExecutionPayload at list field Transactions as it is not of Message kind"))
}

func (x *_ExecutionPayload_14_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ExecutionPayload_14_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_ExecutionPayload_14_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ExecutionPayload                  protoreflect.MessageDescriptor
	fd_ExecutionPayload_parent_hash      protoreflect.FieldDescriptor
	fd_ExecutionPayload_fee_recipient    protoreflect.FieldDescriptor
	fd_ExecutionPayload_state_root       protoreflect.FieldDescriptor
	fd_ExecutionPayload_receipts_root    protoreflect.FieldDescriptor
	fd_ExecutionPayload_logs_bloom       protoreflect.FieldDescriptor
	fd_ExecutionPayload_prev_randao      protoreflect.FieldDescriptor
	fd_ExecutionPayload_block_number     protoreflect.FieldDescriptor
	fd_ExecutionPayload_gas_limit        protoreflect.FieldDescriptor
	fd_ExecutionPayload_gas_used         protoreflect.FieldDescriptor
	fd_ExecutionPayload_timestamp        protoreflect.FieldDescriptor
	fd_ExecutionPayload_extra_data       protoreflect.FieldDescriptor
	fd_ExecutionPayload_base_fee_per_gas protoreflect.FieldDescriptor
	fd_ExecutionPayload_block_hash       protoreflect.FieldDescriptor
	fd_ExecutionPayload_transactions     protoreflect.FieldDescriptor
	fd_ExecutionPayload_beacon_root      protoreflect.FieldDescriptor
	fd_ExecutionPayload_blob_gas_used    protoreflect.FieldDescriptor
	fd_ExecutionPayload_excess_blob_gas  protoreflect.FieldDescriptor
)

func init() {
	file_goat_goat_v1_goat_proto_init()
	md_ExecutionPayload = File_goat_goat_v1_goat_proto.Messages().ByName("ExecutionPayload")
	fd_ExecutionPayload_parent_hash = md_ExecutionPayload.Fields().ByName("parent_hash")
	fd_ExecutionPayload_fee_recipient = md_ExecutionPayload.Fields().ByName("fee_recipient")
	fd_ExecutionPayload_state_root = md_ExecutionPayload.Fields().ByName("state_root")
	fd_ExecutionPayload_receipts_root = md_ExecutionPayload.Fields().ByName("receipts_root")
	fd_ExecutionPayload_logs_bloom = md_ExecutionPayload.Fields().ByName("logs_bloom")
	fd_ExecutionPayload_prev_randao = md_ExecutionPayload.Fields().ByName("prev_randao")
	fd_ExecutionPayload_block_number = md_ExecutionPayload.Fields().ByName("block_number")
	fd_ExecutionPayload_gas_limit = md_ExecutionPayload.Fields().ByName("gas_limit")
	fd_ExecutionPayload_gas_used = md_ExecutionPayload.Fields().ByName("gas_used")
	fd_ExecutionPayload_timestamp = md_ExecutionPayload.Fields().ByName("timestamp")
	fd_ExecutionPayload_extra_data = md_ExecutionPayload.Fields().ByName("extra_data")
	fd_ExecutionPayload_base_fee_per_gas = md_ExecutionPayload.Fields().ByName("base_fee_per_gas")
	fd_ExecutionPayload_block_hash = md_ExecutionPayload.Fields().ByName("block_hash")
	fd_ExecutionPayload_transactions = md_ExecutionPayload.Fields().ByName("transactions")
	fd_ExecutionPayload_beacon_root = md_ExecutionPayload.Fields().ByName("beacon_root")
	fd_ExecutionPayload_blob_gas_used = md_ExecutionPayload.Fields().ByName("blob_gas_used")
	fd_ExecutionPayload_excess_blob_gas = md_ExecutionPayload.Fields().ByName("excess_blob_gas")
}

var _ protoreflect.Message = (*fastReflection_ExecutionPayload)(nil)

type fastReflection_ExecutionPayload ExecutionPayload

func (x *ExecutionPayload) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExecutionPayload)(x)
}

func (x *ExecutionPayload) slowProtoReflect() protoreflect.Message {
	mi := &file_goat_goat_v1_goat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ExecutionPayload_messageType fastReflection_ExecutionPayload_messageType
var _ protoreflect.MessageType = fastReflection_ExecutionPayload_messageType{}

type fastReflection_ExecutionPayload_messageType struct{}

func (x fastReflection_ExecutionPayload_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExecutionPayload)(nil)
}
func (x fastReflection_ExecutionPayload_messageType) New() protoreflect.Message {
	return new(fastReflection_ExecutionPayload)
}
func (x fastReflection_ExecutionPayload_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExecutionPayload
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExecutionPayload) Descriptor() protoreflect.MessageDescriptor {
	return md_ExecutionPayload
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExecutionPayload) Type() protoreflect.MessageType {
	return _fastReflection_ExecutionPayload_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExecutionPayload) New() protoreflect.Message {
	return new(fastReflection_ExecutionPayload)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExecutionPayload) Interface() protoreflect.ProtoMessage {
	return (*ExecutionPayload)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExecutionPayload) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ParentHash) != 0 {
		value := protoreflect.ValueOfBytes(x.ParentHash)
		if !f(fd_ExecutionPayload_parent_hash, value) {
			return
		}
	}
	if len(x.FeeRecipient) != 0 {
		value := protoreflect.ValueOfBytes(x.FeeRecipient)
		if !f(fd_ExecutionPayload_fee_recipient, value) {
			return
		}
	}
	if len(x.StateRoot) != 0 {
		value := protoreflect.ValueOfBytes(x.StateRoot)
		if !f(fd_ExecutionPayload_state_root, value) {
			return
		}
	}
	if len(x.ReceiptsRoot) != 0 {
		value := protoreflect.ValueOfBytes(x.ReceiptsRoot)
		if !f(fd_ExecutionPayload_receipts_root, value) {
			return
		}
	}
	if len(x.LogsBloom) != 0 {
		value := protoreflect.ValueOfBytes(x.LogsBloom)
		if !f(fd_ExecutionPayload_logs_bloom, value) {
			return
		}
	}
	if len(x.PrevRandao) != 0 {
		value := protoreflect.ValueOfBytes(x.PrevRandao)
		if !f(fd_ExecutionPayload_prev_randao, value) {
			return
		}
	}
	if x.BlockNumber != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockNumber)
		if !f(fd_ExecutionPayload_block_number, value) {
			return
		}
	}
	if x.GasLimit != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasLimit)
		if !f(fd_ExecutionPayload_gas_limit, value) {
			return
		}
	}
	if x.GasUsed != uint64(0) {
		value := protoreflect.ValueOfUint64(x.GasUsed)
		if !f(fd_ExecutionPayload_gas_used, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_ExecutionPayload_timestamp, value) {
			return
		}
	}
	if len(x.ExtraData) != 0 {
		value := protoreflect.ValueOfBytes(x.ExtraData)
		if !f(fd_ExecutionPayload_extra_data, value) {
			return
		}
	}
	if len(x.BaseFeePerGas) != 0 {
		value := protoreflect.ValueOfBytes(x.BaseFeePerGas)
		if !f(fd_ExecutionPayload_base_fee_per_gas, value) {
			return
		}
	}
	if len(x.BlockHash) != 0 {
		value := protoreflect.ValueOfBytes(x.BlockHash)
		if !f(fd_ExecutionPayload_block_hash, value) {
			return
		}
	}
	if len(x.Transactions) != 0 {
		value := protoreflect.ValueOfList(&_ExecutionPayload_14_list{list: &x.Transactions})
		if !f(fd_ExecutionPayload_transactions, value) {
			return
		}
	}
	if len(x.BeaconRoot) != 0 {
		value := protoreflect.ValueOfBytes(x.BeaconRoot)
		if !f(fd_ExecutionPayload_beacon_root, value) {
			return
		}
	}
	if x.BlobGasUsed != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlobGasUsed)
		if !f(fd_ExecutionPayload_blob_gas_used, value) {
			return
		}
	}
	if x.ExcessBlobGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExcessBlobGas)
		if !f(fd_ExecutionPayload_excess_blob_gas, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExecutionPayload) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goat.goat.v1.ExecutionPayload.parent_hash":
		return len(x.ParentHash) != 0
	case "goat.goat.v1.ExecutionPayload.fee_recipient":
		return len(x.FeeRecipient) != 0
	case "goat.goat.v1.ExecutionPayload.state_root":
		return len(x.StateRoot) != 0
	case "goat.goat.v1.ExecutionPayload.receipts_root":
		return len(x.ReceiptsRoot) != 0
	case "goat.goat.v1.ExecutionPayload.logs_bloom":
		return len(x.LogsBloom) != 0
	case "goat.goat.v1.ExecutionPayload.prev_randao":
		return len(x.PrevRandao) != 0
	case "goat.goat.v1.ExecutionPayload.block_number":
		return x.BlockNumber != uint64(0)
	case "goat.goat.v1.ExecutionPayload.gas_limit":
		return x.GasLimit != uint64(0)
	case "goat.goat.v1.ExecutionPayload.gas_used":
		return x.GasUsed != uint64(0)
	case "goat.goat.v1.ExecutionPayload.timestamp":
		return x.Timestamp != uint64(0)
	case "goat.goat.v1.ExecutionPayload.extra_data":
		return len(x.ExtraData) != 0
	case "goat.goat.v1.ExecutionPayload.base_fee_per_gas":
		return len(x.BaseFeePerGas) != 0
	case "goat.goat.v1.ExecutionPayload.block_hash":
		return len(x.BlockHash) != 0
	case "goat.goat.v1.ExecutionPayload.transactions":
		return len(x.Transactions) != 0
	case "goat.goat.v1.ExecutionPayload.beacon_root":
		return len(x.BeaconRoot) != 0
	case "goat.goat.v1.ExecutionPayload.blob_gas_used":
		return x.BlobGasUsed != uint64(0)
	case "goat.goat.v1.ExecutionPayload.excess_blob_gas":
		return x.ExcessBlobGas != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.ExecutionPayload"))
		}
		panic(fmt.Errorf("message goat.goat.v1.ExecutionPayload does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecutionPayload) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goat.goat.v1.ExecutionPayload.parent_hash":
		x.ParentHash = nil
	case "goat.goat.v1.ExecutionPayload.fee_recipient":
		x.FeeRecipient = nil
	case "goat.goat.v1.ExecutionPayload.state_root":
		x.StateRoot = nil
	case "goat.goat.v1.ExecutionPayload.receipts_root":
		x.ReceiptsRoot = nil
	case "goat.goat.v1.ExecutionPayload.logs_bloom":
		x.LogsBloom = nil
	case "goat.goat.v1.ExecutionPayload.prev_randao":
		x.PrevRandao = nil
	case "goat.goat.v1.ExecutionPayload.block_number":
		x.BlockNumber = uint64(0)
	case "goat.goat.v1.ExecutionPayload.gas_limit":
		x.GasLimit = uint64(0)
	case "goat.goat.v1.ExecutionPayload.gas_used":
		x.GasUsed = uint64(0)
	case "goat.goat.v1.ExecutionPayload.timestamp":
		x.Timestamp = uint64(0)
	case "goat.goat.v1.ExecutionPayload.extra_data":
		x.ExtraData = nil
	case "goat.goat.v1.ExecutionPayload.base_fee_per_gas":
		x.BaseFeePerGas = nil
	case "goat.goat.v1.ExecutionPayload.block_hash":
		x.BlockHash = nil
	case "goat.goat.v1.ExecutionPayload.transactions":
		x.Transactions = nil
	case "goat.goat.v1.ExecutionPayload.beacon_root":
		x.BeaconRoot = nil
	case "goat.goat.v1.ExecutionPayload.blob_gas_used":
		x.BlobGasUsed = uint64(0)
	case "goat.goat.v1.ExecutionPayload.excess_blob_gas":
		x.ExcessBlobGas = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.ExecutionPayload"))
		}
		panic(fmt.Errorf("message goat.goat.v1.ExecutionPayload does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExecutionPayload) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goat.goat.v1.ExecutionPayload.parent_hash":
		value := x.ParentHash
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.fee_recipient":
		value := x.FeeRecipient
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.state_root":
		value := x.StateRoot
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.receipts_root":
		value := x.ReceiptsRoot
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.logs_bloom":
		value := x.LogsBloom
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.prev_randao":
		value := x.PrevRandao
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.block_number":
		value := x.BlockNumber
		return protoreflect.ValueOfUint64(value)
	case "goat.goat.v1.ExecutionPayload.gas_limit":
		value := x.GasLimit
		return protoreflect.ValueOfUint64(value)
	case "goat.goat.v1.ExecutionPayload.gas_used":
		value := x.GasUsed
		return protoreflect.ValueOfUint64(value)
	case "goat.goat.v1.ExecutionPayload.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	case "goat.goat.v1.ExecutionPayload.extra_data":
		value := x.ExtraData
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.base_fee_per_gas":
		value := x.BaseFeePerGas
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.block_hash":
		value := x.BlockHash
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.transactions":
		if len(x.Transactions) == 0 {
			return protoreflect.ValueOfList(&_ExecutionPayload_14_list{})
		}
		listValue := &_ExecutionPayload_14_list{list: &x.Transactions}
		return protoreflect.ValueOfList(listValue)
	case "goat.goat.v1.ExecutionPayload.beacon_root":
		value := x.BeaconRoot
		return protoreflect.ValueOfBytes(value)
	case "goat.goat.v1.ExecutionPayload.blob_gas_used":
		value := x.BlobGasUsed
		return protoreflect.ValueOfUint64(value)
	case "goat.goat.v1.ExecutionPayload.excess_blob_gas":
		value := x.ExcessBlobGas
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.ExecutionPayload"))
		}
		panic(fmt.Errorf("message goat.goat.v1.ExecutionPayload does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecutionPayload) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goat.goat.v1.ExecutionPayload.parent_hash":
		x.ParentHash = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.fee_recipient":
		x.FeeRecipient = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.state_root":
		x.StateRoot = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.receipts_root":
		x.ReceiptsRoot = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.logs_bloom":
		x.LogsBloom = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.prev_randao":
		x.PrevRandao = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.block_number":
		x.BlockNumber = value.Uint()
	case "goat.goat.v1.ExecutionPayload.gas_limit":
		x.GasLimit = value.Uint()
	case "goat.goat.v1.ExecutionPayload.gas_used":
		x.GasUsed = value.Uint()
	case "goat.goat.v1.ExecutionPayload.timestamp":
		x.Timestamp = value.Uint()
	case "goat.goat.v1.ExecutionPayload.extra_data":
		x.ExtraData = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.base_fee_per_gas":
		x.BaseFeePerGas = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.block_hash":
		x.BlockHash = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.transactions":
		lv := value.List()
		clv := lv.(*_ExecutionPayload_14_list)
		x.Transactions = *clv.list
	case "goat.goat.v1.ExecutionPayload.beacon_root":
		x.BeaconRoot = value.Bytes()
	case "goat.goat.v1.ExecutionPayload.blob_gas_used":
		x.BlobGasUsed = value.Uint()
	case "goat.goat.v1.ExecutionPayload.excess_blob_gas":
		x.ExcessBlobGas = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.ExecutionPayload"))
		}
		panic(fmt.Errorf("message goat.goat.v1.ExecutionPayload does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecutionPayload) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.goat.v1.ExecutionPayload.transactions":
		if x.Transactions == nil {
			x.Transactions = [][]byte{}
		}
		value := &_ExecutionPayload_14_list{list: &x.Transactions}
		return protoreflect.ValueOfList(value)
	case "goat.goat.v1.ExecutionPayload.parent_hash":
		panic(fmt.Errorf("field parent_hash of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.fee_recipient":
		panic(fmt.Errorf("field fee_recipient of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.state_root":
		panic(fmt.Errorf("field state_root of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.receipts_root":
		panic(fmt.Errorf("field receipts_root of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.logs_bloom":
		panic(fmt.Errorf("field logs_bloom of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.prev_randao":
		panic(fmt.Errorf("field prev_randao of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.block_number":
		panic(fmt.Errorf("field block_number of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.gas_limit":
		panic(fmt.Errorf("field gas_limit of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.gas_used":
		panic(fmt.Errorf("field gas_used of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.timestamp":
		panic(fmt.Errorf("field timestamp of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.extra_data":
		panic(fmt.Errorf("field extra_data of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.base_fee_per_gas":
		panic(fmt.Errorf("field base_fee_per_gas of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.block_hash":
		panic(fmt.Errorf("field block_hash of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.beacon_root":
		panic(fmt.Errorf("field beacon_root of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.blob_gas_used":
		panic(fmt.Errorf("field blob_gas_used of message goat.goat.v1.ExecutionPayload is not mutable"))
	case "goat.goat.v1.ExecutionPayload.excess_blob_gas":
		panic(fmt.Errorf("field excess_blob_gas of message goat.goat.v1.ExecutionPayload is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.ExecutionPayload"))
		}
		panic(fmt.Errorf("message goat.goat.v1.ExecutionPayload does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExecutionPayload) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.goat.v1.ExecutionPayload.parent_hash":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.fee_recipient":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.state_root":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.receipts_root":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.logs_bloom":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.prev_randao":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.block_number":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.goat.v1.ExecutionPayload.gas_limit":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.goat.v1.ExecutionPayload.gas_used":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.goat.v1.ExecutionPayload.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.goat.v1.ExecutionPayload.extra_data":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.base_fee_per_gas":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.block_hash":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.transactions":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_ExecutionPayload_14_list{list: &list})
	case "goat.goat.v1.ExecutionPayload.beacon_root":
		return protoreflect.ValueOfBytes(nil)
	case "goat.goat.v1.ExecutionPayload.blob_gas_used":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.goat.v1.ExecutionPayload.excess_blob_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.goat.v1.ExecutionPayload"))
		}
		panic(fmt.Errorf("message goat.goat.v1.ExecutionPayload does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExecutionPayload) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goat.goat.v1.ExecutionPayload", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExecutionPayload) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecutionPayload) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExecutionPayload) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExecutionPayload) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExecutionPayload)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ParentHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeeRecipient)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StateRoot)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ReceiptsRoot)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LogsBloom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PrevRandao)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockNumber != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockNumber))
		}
		if x.GasLimit != 0 {
			n += 1 + runtime.Sov(uint64(x.GasLimit))
		}
		if x.GasUsed != 0 {
			n += 1 + runtime.Sov(uint64(x.GasUsed))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		l = len(x.ExtraData)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BaseFeePerGas)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BlockHash)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Transactions) > 0 {
			for _, b := range x.Transactions {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.BeaconRoot)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlobGasUsed != 0 {
			n += 2 + runtime.Sov(uint64(x.BlobGasUsed))
		}
		if x.ExcessBlobGas != 0 {
			n += 2 + runtime.Sov(uint64(x.ExcessBlobGas))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExecutionPayload)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ExcessBlobGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExcessBlobGas))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.BlobGasUsed != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlobGasUsed))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if len(x.BeaconRoot) > 0 {
			i -= len(x.BeaconRoot)
			copy(dAtA[i:], x.BeaconRoot)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BeaconRoot)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.Transactions) > 0 {
			for iNdEx := len(x.Transactions) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.Transactions[iNdEx])
				copy(dAtA[i:], x.Transactions[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Transactions[iNdEx])))
				i--
				dAtA[i] = 0x72
			}
		}
		if len(x.BlockHash) > 0 {
			i -= len(x.BlockHash)
			copy(dAtA[i:], x.BlockHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BlockHash)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.BaseFeePerGas) > 0 {
			i -= len(x.BaseFeePerGas)
			copy(dAtA[i:], x.BaseFeePerGas)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseFeePerGas)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.ExtraData) > 0 {
			i -= len(x.ExtraData)
			copy(dAtA[i:], x.ExtraData)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExtraData)))
			i--
			dAtA[i] = 0x5a
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x50
		}
		if x.GasUsed != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasUsed))
			i--
			dAtA[i] = 0x48
		}
		if x.GasLimit != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GasLimit))
			i--
			dAtA[i] = 0x40
		}
		if x.BlockNumber != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockNumber))
			i--
			dAtA[i] = 0x38
		}
		if len(x.PrevRandao) > 0 {
			i -= len(x.PrevRandao)
			copy(dAtA[i:], x.PrevRandao)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PrevRandao)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.LogsBloom) > 0 {
			i -= len(x.LogsBloom)
			copy(dAtA[i:], x.LogsBloom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LogsBloom)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.ReceiptsRoot) > 0 {
			i -= len(x.ReceiptsRoot)
			copy(dAtA[i:], x.ReceiptsRoot)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ReceiptsRoot)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.StateRoot) > 0 {
			i -= len(x.StateRoot)
			copy(dAtA[i:], x.StateRoot)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StateRoot)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.FeeRecipient) > 0 {
			i -= len(x.FeeRecipient)
			copy(dAtA[i:], x.FeeRecipient)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeRecipient)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ParentHash) > 0 {
			i -= len(x.ParentHash)
			copy(dAtA[i:], x.ParentHash)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ParentHash)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExecutionPayload)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExecutionPayload: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExecutionPayload: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ParentHash = append(x.ParentHash[:0], dAtA[iNdEx:postIndex]...)
				if x.ParentHash == nil {
					x.ParentHash = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeRecipient = append(x.FeeRecipient[:0], dAtA[iNdEx:postIndex]...)
				if x.FeeRecipient == nil {
					x.FeeRecipient = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StateRoot = append(x.StateRoot[:0], dAtA[iNdEx:postIndex]...)
				if x.StateRoot == nil {
					x.StateRoot = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceiptsRoot", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ReceiptsRoot = append(x.ReceiptsRoot[:0], dAtA[iNdEx:postIndex]...)
				if x.ReceiptsRoot == nil {
					x.ReceiptsRoot = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LogsBloom = append(x.LogsBloom[:0], dAtA[iNdEx:postIndex]...)
				if x.LogsBloom == nil {
					x.LogsBloom = []byte{}
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrevRandao", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PrevRandao = append(x.PrevRandao[:0], dAtA[iNdEx:postIndex]...)
				if x.PrevRandao == nil {
					x.PrevRandao = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
				}
				x.BlockNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockNumber |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
				}
				x.GasLimit = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasLimit |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
				}
				x.GasUsed = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GasUsed |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExtraData = append(x.ExtraData[:0], dAtA[iNdEx:postIndex]...)
				if x.ExtraData == nil {
					x.ExtraData = []byte{}
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseFeePerGas", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseFeePerGas = append(x.BaseFeePerGas[:0], dAtA[iNdEx:postIndex]...)
				if x.BaseFeePerGas == nil {
					x.BaseFeePerGas = []byte{}
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BlockHash = append(x.BlockHash[:0], dAtA[iNdEx:postIndex]...)
				if x.BlockHash == nil {
					x.BlockHash = []byte{}
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Transactions = append(x.Transactions, make([]byte, postIndex-iNdEx))
				copy(x.Transactions[len(x.Transactions)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BeaconRoot", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BeaconRoot = append(x.BeaconRoot[:0], dAtA[iNdEx:postIndex]...)
				if x.BeaconRoot == nil {
					x.BeaconRoot = []byte{}
				}
				iNdEx = postIndex
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlobGasUsed", wireType)
				}
				x.BlobGasUsed = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlobGasUsed |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExcessBlobGas", wireType)
				}
				x.ExcessBlobGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExcessBlobGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: goat/goat/v1/goat.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BlobsBundle is retrieved through engine-api from the execution layer client.
type BlobsBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The KZG commitments of the blobs.
	KzgCommitments [][]byte `protobuf:"bytes,1,rep,name=kzg_commitments,json=kzgCommitments,proto3" json:"kzg_commitments,omitempty"`
	// The proofs of the blobs.
	Proofs [][]byte `protobuf:"bytes,2,rep,name=proofs,proto3" json:"proofs,omitempty"`
	// The blobs itself.
	Blobs [][]byte `protobuf:"bytes,3,rep,name=blobs,proto3" json:"blobs,omitempty"`
}

func (x *BlobsBundle) Reset() {
	*x = BlobsBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_goat_v1_goat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobsBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobsBundle) ProtoMessage() {}

// Deprecated: Use BlobsBundle.ProtoReflect.Descriptor instead.
func (*BlobsBundle) Descriptor() ([]byte, []int) {
	return file_goat_goat_v1_goat_proto_rawDescGZIP(), []int{0}
}

func (x *BlobsBundle) GetKzgCommitments() [][]byte {
	if x != nil {
		return x.KzgCommitments
	}
	return nil
}

func (x *BlobsBundle) GetProofs() [][]byte {
	if x != nil {
		return x.Proofs
	}
	return nil
}

func (x *BlobsBundle) GetBlobs() [][]byte {
	if x != nil {
		return x.Blobs
	}
	return nil
}

// ExecutionPayload
type ExecutionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    []byte   `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	FeeRecipient  []byte   `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	StateRoot     []byte   `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot  []byte   `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom     []byte   `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    []byte   `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`
	BlockNumber   uint64   `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64   `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64   `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     uint64   `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData     []byte   `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas []byte   `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	BlockHash     []byte   `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Transactions  [][]byte `protobuf:"bytes,14,rep,name=transactions,proto3" json:"transactions,omitempty"`
	BeaconRoot    []byte   `protobuf:"bytes,15,opt,name=beacon_root,json=beaconRoot,proto3" json:"beacon_root,omitempty"`
	BlobGasUsed   uint64   `protobuf:"varint,16,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	ExcessBlobGas uint64   `protobuf:"varint,17,opt,name=excess_blob_gas,json=excessBlobGas,proto3" json:"excess_blob_gas,omitempty"`
}

func (x *ExecutionPayload) Reset() {
	*x = ExecutionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_goat_v1_goat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionPayload) ProtoMessage() {}

// Deprecated: Use ExecutionPayload.ProtoReflect.Descriptor instead.
func (*ExecutionPayload) Descriptor() ([]byte, []int) {
	return file_goat_goat_v1_goat_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutionPayload) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *ExecutionPayload) GetFeeRecipient() []byte {
	if x != nil {
		return x.FeeRecipient
	}
	return nil
}

func (x *ExecutionPayload) GetStateRoot() []byte {
	if x != nil {
		return x.StateRoot
	}
	return nil
}

func (x *ExecutionPayload) GetReceiptsRoot() []byte {
	if x != nil {
		return x.ReceiptsRoot
	}
	return nil
}

func (x *ExecutionPayload) GetLogsBloom() []byte {
	if x != nil {
		return x.LogsBloom
	}
	return nil
}

func (x *ExecutionPayload) GetPrevRandao() []byte {
	if x != nil {
		return x.PrevRandao
	}
	return nil
}

func (x *ExecutionPayload) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecutionPayload) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *ExecutionPayload) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ExecutionPayload) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExecutionPayload) GetExtraData() []byte {
	if x != nil {
		return x.ExtraData
	}
	return nil
}

func (x *ExecutionPayload) GetBaseFeePerGas() []byte {
	if x != nil {
		return x.BaseFeePerGas
	}
	return nil
}

func (x *ExecutionPayload) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *ExecutionPayload) GetTransactions() [][]byte {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *ExecutionPayload) GetBeaconRoot() []byte {
	if x != nil {
		return x.BeaconRoot
	}
	return nil
}

func (x *ExecutionPayload) GetBlobGasUsed() uint64 {
	if x != nil {
		return x.BlobGasUsed
	}
	return 0
}

func (x *ExecutionPayload) GetExcessBlobGas() uint64 {
	if x != nil {
		return x.ExcessBlobGas
	}
	return 0
}

var File_goat_goat_v1_goat_proto protoreflect.FileDescriptor

var file_goat_goat_v1_goat_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x6f, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x6f, 0x61, 0x74, 0x2e,
	0x67, 0x6f, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x64, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x62, 0x73,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x7a, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0e, 0x6b, 0x7a, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x22, 0xcd, 0x04,
	0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x10, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x42, 0xa4, 0x01,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x42, 0x09, 0x47, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x61, 0x74,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x6f,
	0x61, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x47, 0x58, 0xaa, 0x02, 0x0c, 0x47, 0x6f, 0x61,
	0x74, 0x2e, 0x47, 0x6f, 0x61, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0c, 0x47, 0x6f, 0x61, 0x74,
	0x5c, 0x47, 0x6f, 0x61, 0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x18, 0x47, 0x6f, 0x61, 0x74, 0x5c,
	0x47, 0x6f, 0x61, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x47, 0x6f, 0x61, 0x74, 0x3a, 0x3a, 0x47, 0x6f, 0x61, 0x74,
	0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goat_goat_v1_goat_proto_rawDescOnce sync.Once
	file_goat_goat_v1_goat_proto_rawDescData = file_goat_goat_v1_goat_proto_rawDesc
)

func file_goat_goat_v1_goat_proto_rawDescGZIP() []byte {
	file_goat_goat_v1_goat_proto_rawDescOnce.Do(func() {
		file_goat_goat_v1_goat_proto_rawDescData = protoimpl.X.CompressGZIP(file_goat_goat_v1_goat_proto_rawDescData)
	})
	return file_goat_goat_v1_goat_proto_rawDescData
}

var file_goat_goat_v1_goat_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_goat_goat_v1_goat_proto_goTypes = []interface{}{
	(*BlobsBundle)(nil),      // 0: goat.goat.v1.BlobsBundle
	(*ExecutionPayload)(nil), // 1: goat.goat.v1.ExecutionPayload
}
var file_goat_goat_v1_goat_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_goat_goat_v1_goat_proto_init() }
func file_goat_goat_v1_goat_proto_init() {
	if File_goat_goat_v1_goat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goat_goat_v1_goat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobsBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_goat_v1_goat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goat_goat_v1_goat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goat_goat_v1_goat_proto_goTypes,
		DependencyIndexes: file_goat_goat_v1_goat_proto_depIdxs,
		MessageInfos:      file_goat_goat_v1_goat_proto_msgTypes,
	}.Build()
	File_goat_goat_v1_goat_proto = out.File
	file_goat_goat_v1_goat_proto_rawDesc = nil
	file_goat_goat_v1_goat_proto_goTypes = nil
	file_goat_goat_v1_goat_proto_depIdxs = nil
}
