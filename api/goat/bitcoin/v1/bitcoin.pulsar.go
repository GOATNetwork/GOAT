// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package bitcoinv1

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	v1 "github.com/goatnetwork/goat/api/goat/relayer/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Deposit                    protoreflect.MessageDescriptor
	fd_Deposit_version            protoreflect.FieldDescriptor
	fd_Deposit_block_number       protoreflect.FieldDescriptor
	fd_Deposit_tx_index           protoreflect.FieldDescriptor
	fd_Deposit_no_witness_tx      protoreflect.FieldDescriptor
	fd_Deposit_output_index       protoreflect.FieldDescriptor
	fd_Deposit_intermediate_proof protoreflect.FieldDescriptor
	fd_Deposit_evm_address        protoreflect.FieldDescriptor
	fd_Deposit_relayer_pubkey     protoreflect.FieldDescriptor
)

func init() {
	file_goat_bitcoin_v1_bitcoin_proto_init()
	md_Deposit = File_goat_bitcoin_v1_bitcoin_proto.Messages().ByName("Deposit")
	fd_Deposit_version = md_Deposit.Fields().ByName("version")
	fd_Deposit_block_number = md_Deposit.Fields().ByName("block_number")
	fd_Deposit_tx_index = md_Deposit.Fields().ByName("tx_index")
	fd_Deposit_no_witness_tx = md_Deposit.Fields().ByName("no_witness_tx")
	fd_Deposit_output_index = md_Deposit.Fields().ByName("output_index")
	fd_Deposit_intermediate_proof = md_Deposit.Fields().ByName("intermediate_proof")
	fd_Deposit_evm_address = md_Deposit.Fields().ByName("evm_address")
	fd_Deposit_relayer_pubkey = md_Deposit.Fields().ByName("relayer_pubkey")
}

var _ protoreflect.Message = (*fastReflection_Deposit)(nil)

type fastReflection_Deposit Deposit

func (x *Deposit) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Deposit)(x)
}

func (x *Deposit) slowProtoReflect() protoreflect.Message {
	mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Deposit_messageType fastReflection_Deposit_messageType
var _ protoreflect.MessageType = fastReflection_Deposit_messageType{}

type fastReflection_Deposit_messageType struct{}

func (x fastReflection_Deposit_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Deposit)(nil)
}
func (x fastReflection_Deposit_messageType) New() protoreflect.Message {
	return new(fastReflection_Deposit)
}
func (x fastReflection_Deposit_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Deposit
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Deposit) Descriptor() protoreflect.MessageDescriptor {
	return md_Deposit
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Deposit) Type() protoreflect.MessageType {
	return _fastReflection_Deposit_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Deposit) New() protoreflect.Message {
	return new(fastReflection_Deposit)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Deposit) Interface() protoreflect.ProtoMessage {
	return (*Deposit)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Deposit) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Version != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Version)
		if !f(fd_Deposit_version, value) {
			return
		}
	}
	if x.BlockNumber != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockNumber)
		if !f(fd_Deposit_block_number, value) {
			return
		}
	}
	if x.TxIndex != uint32(0) {
		value := protoreflect.ValueOfUint32(x.TxIndex)
		if !f(fd_Deposit_tx_index, value) {
			return
		}
	}
	if len(x.NoWitnessTx) != 0 {
		value := protoreflect.ValueOfBytes(x.NoWitnessTx)
		if !f(fd_Deposit_no_witness_tx, value) {
			return
		}
	}
	if x.OutputIndex != uint32(0) {
		value := protoreflect.ValueOfUint32(x.OutputIndex)
		if !f(fd_Deposit_output_index, value) {
			return
		}
	}
	if len(x.IntermediateProof) != 0 {
		value := protoreflect.ValueOfBytes(x.IntermediateProof)
		if !f(fd_Deposit_intermediate_proof, value) {
			return
		}
	}
	if len(x.EvmAddress) != 0 {
		value := protoreflect.ValueOfBytes(x.EvmAddress)
		if !f(fd_Deposit_evm_address, value) {
			return
		}
	}
	if x.RelayerPubkey != nil {
		value := protoreflect.ValueOfMessage(x.RelayerPubkey.ProtoReflect())
		if !f(fd_Deposit_relayer_pubkey, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Deposit) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goat.bitcoin.v1.Deposit.version":
		return x.Version != uint32(0)
	case "goat.bitcoin.v1.Deposit.block_number":
		return x.BlockNumber != uint64(0)
	case "goat.bitcoin.v1.Deposit.tx_index":
		return x.TxIndex != uint32(0)
	case "goat.bitcoin.v1.Deposit.no_witness_tx":
		return len(x.NoWitnessTx) != 0
	case "goat.bitcoin.v1.Deposit.output_index":
		return x.OutputIndex != uint32(0)
	case "goat.bitcoin.v1.Deposit.intermediate_proof":
		return len(x.IntermediateProof) != 0
	case "goat.bitcoin.v1.Deposit.evm_address":
		return len(x.EvmAddress) != 0
	case "goat.bitcoin.v1.Deposit.relayer_pubkey":
		return x.RelayerPubkey != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.Deposit"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.Deposit does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.Deposit.version":
		x.Version = uint32(0)
	case "goat.bitcoin.v1.Deposit.block_number":
		x.BlockNumber = uint64(0)
	case "goat.bitcoin.v1.Deposit.tx_index":
		x.TxIndex = uint32(0)
	case "goat.bitcoin.v1.Deposit.no_witness_tx":
		x.NoWitnessTx = nil
	case "goat.bitcoin.v1.Deposit.output_index":
		x.OutputIndex = uint32(0)
	case "goat.bitcoin.v1.Deposit.intermediate_proof":
		x.IntermediateProof = nil
	case "goat.bitcoin.v1.Deposit.evm_address":
		x.EvmAddress = nil
	case "goat.bitcoin.v1.Deposit.relayer_pubkey":
		x.RelayerPubkey = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.Deposit"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.Deposit does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Deposit) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goat.bitcoin.v1.Deposit.version":
		value := x.Version
		return protoreflect.ValueOfUint32(value)
	case "goat.bitcoin.v1.Deposit.block_number":
		value := x.BlockNumber
		return protoreflect.ValueOfUint64(value)
	case "goat.bitcoin.v1.Deposit.tx_index":
		value := x.TxIndex
		return protoreflect.ValueOfUint32(value)
	case "goat.bitcoin.v1.Deposit.no_witness_tx":
		value := x.NoWitnessTx
		return protoreflect.ValueOfBytes(value)
	case "goat.bitcoin.v1.Deposit.output_index":
		value := x.OutputIndex
		return protoreflect.ValueOfUint32(value)
	case "goat.bitcoin.v1.Deposit.intermediate_proof":
		value := x.IntermediateProof
		return protoreflect.ValueOfBytes(value)
	case "goat.bitcoin.v1.Deposit.evm_address":
		value := x.EvmAddress
		return protoreflect.ValueOfBytes(value)
	case "goat.bitcoin.v1.Deposit.relayer_pubkey":
		value := x.RelayerPubkey
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.Deposit"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.Deposit does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.Deposit.version":
		x.Version = uint32(value.Uint())
	case "goat.bitcoin.v1.Deposit.block_number":
		x.BlockNumber = value.Uint()
	case "goat.bitcoin.v1.Deposit.tx_index":
		x.TxIndex = uint32(value.Uint())
	case "goat.bitcoin.v1.Deposit.no_witness_tx":
		x.NoWitnessTx = value.Bytes()
	case "goat.bitcoin.v1.Deposit.output_index":
		x.OutputIndex = uint32(value.Uint())
	case "goat.bitcoin.v1.Deposit.intermediate_proof":
		x.IntermediateProof = value.Bytes()
	case "goat.bitcoin.v1.Deposit.evm_address":
		x.EvmAddress = value.Bytes()
	case "goat.bitcoin.v1.Deposit.relayer_pubkey":
		x.RelayerPubkey = value.Message().Interface().(*v1.PublicKey)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.Deposit"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.Deposit does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.Deposit.relayer_pubkey":
		if x.RelayerPubkey == nil {
			x.RelayerPubkey = new(v1.PublicKey)
		}
		return protoreflect.ValueOfMessage(x.RelayerPubkey.ProtoReflect())
	case "goat.bitcoin.v1.Deposit.version":
		panic(fmt.Errorf("field version of message goat.bitcoin.v1.Deposit is not mutable"))
	case "goat.bitcoin.v1.Deposit.block_number":
		panic(fmt.Errorf("field block_number of message goat.bitcoin.v1.Deposit is not mutable"))
	case "goat.bitcoin.v1.Deposit.tx_index":
		panic(fmt.Errorf("field tx_index of message goat.bitcoin.v1.Deposit is not mutable"))
	case "goat.bitcoin.v1.Deposit.no_witness_tx":
		panic(fmt.Errorf("field no_witness_tx of message goat.bitcoin.v1.Deposit is not mutable"))
	case "goat.bitcoin.v1.Deposit.output_index":
		panic(fmt.Errorf("field output_index of message goat.bitcoin.v1.Deposit is not mutable"))
	case "goat.bitcoin.v1.Deposit.intermediate_proof":
		panic(fmt.Errorf("field intermediate_proof of message goat.bitcoin.v1.Deposit is not mutable"))
	case "goat.bitcoin.v1.Deposit.evm_address":
		panic(fmt.Errorf("field evm_address of message goat.bitcoin.v1.Deposit is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.Deposit"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.Deposit does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Deposit) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.Deposit.version":
		return protoreflect.ValueOfUint32(uint32(0))
	case "goat.bitcoin.v1.Deposit.block_number":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.bitcoin.v1.Deposit.tx_index":
		return protoreflect.ValueOfUint32(uint32(0))
	case "goat.bitcoin.v1.Deposit.no_witness_tx":
		return protoreflect.ValueOfBytes(nil)
	case "goat.bitcoin.v1.Deposit.output_index":
		return protoreflect.ValueOfUint32(uint32(0))
	case "goat.bitcoin.v1.Deposit.intermediate_proof":
		return protoreflect.ValueOfBytes(nil)
	case "goat.bitcoin.v1.Deposit.evm_address":
		return protoreflect.ValueOfBytes(nil)
	case "goat.bitcoin.v1.Deposit.relayer_pubkey":
		m := new(v1.PublicKey)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.Deposit"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.Deposit does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Deposit) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goat.bitcoin.v1.Deposit", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Deposit) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Deposit) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Deposit) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Deposit) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Deposit)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Version != 0 {
			n += 1 + runtime.Sov(uint64(x.Version))
		}
		if x.BlockNumber != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockNumber))
		}
		if x.TxIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.TxIndex))
		}
		l = len(x.NoWitnessTx)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OutputIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.OutputIndex))
		}
		l = len(x.IntermediateProof)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EvmAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RelayerPubkey != nil {
			l = options.Size(x.RelayerPubkey)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Deposit)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RelayerPubkey != nil {
			encoded, err := options.Marshal(x.RelayerPubkey)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.EvmAddress) > 0 {
			i -= len(x.EvmAddress)
			copy(dAtA[i:], x.EvmAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EvmAddress)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.IntermediateProof) > 0 {
			i -= len(x.IntermediateProof)
			copy(dAtA[i:], x.IntermediateProof)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IntermediateProof)))
			i--
			dAtA[i] = 0x32
		}
		if x.OutputIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OutputIndex))
			i--
			dAtA[i] = 0x28
		}
		if len(x.NoWitnessTx) > 0 {
			i -= len(x.NoWitnessTx)
			copy(dAtA[i:], x.NoWitnessTx)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NoWitnessTx)))
			i--
			dAtA[i] = 0x22
		}
		if x.TxIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TxIndex))
			i--
			dAtA[i] = 0x18
		}
		if x.BlockNumber != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockNumber))
			i--
			dAtA[i] = 0x10
		}
		if x.Version != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Version))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Deposit)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Deposit: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
				}
				x.Version = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Version |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
				}
				x.BlockNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockNumber |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
				}
				x.TxIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TxIndex |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NoWitnessTx", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NoWitnessTx = append(x.NoWitnessTx[:0], dAtA[iNdEx:postIndex]...)
				if x.NoWitnessTx == nil {
					x.NoWitnessTx = []byte{}
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
				}
				x.OutputIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OutputIndex |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IntermediateProof", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IntermediateProof = append(x.IntermediateProof[:0], dAtA[iNdEx:postIndex]...)
				if x.IntermediateProof == nil {
					x.IntermediateProof = []byte{}
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EvmAddress = append(x.EvmAddress[:0], dAtA[iNdEx:postIndex]...)
				if x.EvmAddress == nil {
					x.EvmAddress = []byte{}
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RelayerPubkey", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RelayerPubkey == nil {
					x.RelayerPubkey = &v1.PublicKey{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RelayerPubkey); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DepositReceipt         protoreflect.MessageDescriptor
	fd_DepositReceipt_txid    protoreflect.FieldDescriptor
	fd_DepositReceipt_txout   protoreflect.FieldDescriptor
	fd_DepositReceipt_address protoreflect.FieldDescriptor
	fd_DepositReceipt_amount  protoreflect.FieldDescriptor
)

func init() {
	file_goat_bitcoin_v1_bitcoin_proto_init()
	md_DepositReceipt = File_goat_bitcoin_v1_bitcoin_proto.Messages().ByName("DepositReceipt")
	fd_DepositReceipt_txid = md_DepositReceipt.Fields().ByName("txid")
	fd_DepositReceipt_txout = md_DepositReceipt.Fields().ByName("txout")
	fd_DepositReceipt_address = md_DepositReceipt.Fields().ByName("address")
	fd_DepositReceipt_amount = md_DepositReceipt.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_DepositReceipt)(nil)

type fastReflection_DepositReceipt DepositReceipt

func (x *DepositReceipt) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DepositReceipt)(x)
}

func (x *DepositReceipt) slowProtoReflect() protoreflect.Message {
	mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DepositReceipt_messageType fastReflection_DepositReceipt_messageType
var _ protoreflect.MessageType = fastReflection_DepositReceipt_messageType{}

type fastReflection_DepositReceipt_messageType struct{}

func (x fastReflection_DepositReceipt_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DepositReceipt)(nil)
}
func (x fastReflection_DepositReceipt_messageType) New() protoreflect.Message {
	return new(fastReflection_DepositReceipt)
}
func (x fastReflection_DepositReceipt_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositReceipt
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DepositReceipt) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositReceipt
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DepositReceipt) Type() protoreflect.MessageType {
	return _fastReflection_DepositReceipt_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DepositReceipt) New() protoreflect.Message {
	return new(fastReflection_DepositReceipt)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DepositReceipt) Interface() protoreflect.ProtoMessage {
	return (*DepositReceipt)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DepositReceipt) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Txid) != 0 {
		value := protoreflect.ValueOfBytes(x.Txid)
		if !f(fd_DepositReceipt_txid, value) {
			return
		}
	}
	if x.Txout != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Txout)
		if !f(fd_DepositReceipt_txout, value) {
			return
		}
	}
	if len(x.Address) != 0 {
		value := protoreflect.ValueOfBytes(x.Address)
		if !f(fd_DepositReceipt_address, value) {
			return
		}
	}
	if x.Amount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Amount)
		if !f(fd_DepositReceipt_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DepositReceipt) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goat.bitcoin.v1.DepositReceipt.txid":
		return len(x.Txid) != 0
	case "goat.bitcoin.v1.DepositReceipt.txout":
		return x.Txout != uint32(0)
	case "goat.bitcoin.v1.DepositReceipt.address":
		return len(x.Address) != 0
	case "goat.bitcoin.v1.DepositReceipt.amount":
		return x.Amount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.DepositReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.DepositReceipt does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositReceipt) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.DepositReceipt.txid":
		x.Txid = nil
	case "goat.bitcoin.v1.DepositReceipt.txout":
		x.Txout = uint32(0)
	case "goat.bitcoin.v1.DepositReceipt.address":
		x.Address = nil
	case "goat.bitcoin.v1.DepositReceipt.amount":
		x.Amount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.DepositReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.DepositReceipt does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DepositReceipt) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goat.bitcoin.v1.DepositReceipt.txid":
		value := x.Txid
		return protoreflect.ValueOfBytes(value)
	case "goat.bitcoin.v1.DepositReceipt.txout":
		value := x.Txout
		return protoreflect.ValueOfUint32(value)
	case "goat.bitcoin.v1.DepositReceipt.address":
		value := x.Address
		return protoreflect.ValueOfBytes(value)
	case "goat.bitcoin.v1.DepositReceipt.amount":
		value := x.Amount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.DepositReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.DepositReceipt does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositReceipt) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.DepositReceipt.txid":
		x.Txid = value.Bytes()
	case "goat.bitcoin.v1.DepositReceipt.txout":
		x.Txout = uint32(value.Uint())
	case "goat.bitcoin.v1.DepositReceipt.address":
		x.Address = value.Bytes()
	case "goat.bitcoin.v1.DepositReceipt.amount":
		x.Amount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.DepositReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.DepositReceipt does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositReceipt) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.DepositReceipt.txid":
		panic(fmt.Errorf("field txid of message goat.bitcoin.v1.DepositReceipt is not mutable"))
	case "goat.bitcoin.v1.DepositReceipt.txout":
		panic(fmt.Errorf("field txout of message goat.bitcoin.v1.DepositReceipt is not mutable"))
	case "goat.bitcoin.v1.DepositReceipt.address":
		panic(fmt.Errorf("field address of message goat.bitcoin.v1.DepositReceipt is not mutable"))
	case "goat.bitcoin.v1.DepositReceipt.amount":
		panic(fmt.Errorf("field amount of message goat.bitcoin.v1.DepositReceipt is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.DepositReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.DepositReceipt does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DepositReceipt) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.DepositReceipt.txid":
		return protoreflect.ValueOfBytes(nil)
	case "goat.bitcoin.v1.DepositReceipt.txout":
		return protoreflect.ValueOfUint32(uint32(0))
	case "goat.bitcoin.v1.DepositReceipt.address":
		return protoreflect.ValueOfBytes(nil)
	case "goat.bitcoin.v1.DepositReceipt.amount":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.DepositReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.DepositReceipt does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DepositReceipt) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goat.bitcoin.v1.DepositReceipt", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DepositReceipt) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositReceipt) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DepositReceipt) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DepositReceipt) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DepositReceipt)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Txid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Txout != 0 {
			n += 1 + runtime.Sov(uint64(x.Txout))
		}
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DepositReceipt)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x20
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Txout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Txout))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Txid) > 0 {
			i -= len(x.Txid)
			copy(dAtA[i:], x.Txid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Txid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DepositReceipt)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositReceipt: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Txid = append(x.Txid[:0], dAtA[iNdEx:postIndex]...)
				if x.Txid == nil {
					x.Txid = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Txout", wireType)
				}
				x.Txout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Txout |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = append(x.Address[:0], dAtA[iNdEx:postIndex]...)
				if x.Address == nil {
					x.Address = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_WithdrawalReceipt        protoreflect.MessageDescriptor
	fd_WithdrawalReceipt_id     protoreflect.FieldDescriptor
	fd_WithdrawalReceipt_txid   protoreflect.FieldDescriptor
	fd_WithdrawalReceipt_txout  protoreflect.FieldDescriptor
	fd_WithdrawalReceipt_amount protoreflect.FieldDescriptor
)

func init() {
	file_goat_bitcoin_v1_bitcoin_proto_init()
	md_WithdrawalReceipt = File_goat_bitcoin_v1_bitcoin_proto.Messages().ByName("WithdrawalReceipt")
	fd_WithdrawalReceipt_id = md_WithdrawalReceipt.Fields().ByName("id")
	fd_WithdrawalReceipt_txid = md_WithdrawalReceipt.Fields().ByName("txid")
	fd_WithdrawalReceipt_txout = md_WithdrawalReceipt.Fields().ByName("txout")
	fd_WithdrawalReceipt_amount = md_WithdrawalReceipt.Fields().ByName("amount")
}

var _ protoreflect.Message = (*fastReflection_WithdrawalReceipt)(nil)

type fastReflection_WithdrawalReceipt WithdrawalReceipt

func (x *WithdrawalReceipt) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WithdrawalReceipt)(x)
}

func (x *WithdrawalReceipt) slowProtoReflect() protoreflect.Message {
	mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WithdrawalReceipt_messageType fastReflection_WithdrawalReceipt_messageType
var _ protoreflect.MessageType = fastReflection_WithdrawalReceipt_messageType{}

type fastReflection_WithdrawalReceipt_messageType struct{}

func (x fastReflection_WithdrawalReceipt_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WithdrawalReceipt)(nil)
}
func (x fastReflection_WithdrawalReceipt_messageType) New() protoreflect.Message {
	return new(fastReflection_WithdrawalReceipt)
}
func (x fastReflection_WithdrawalReceipt_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawalReceipt
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WithdrawalReceipt) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawalReceipt
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WithdrawalReceipt) Type() protoreflect.MessageType {
	return _fastReflection_WithdrawalReceipt_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WithdrawalReceipt) New() protoreflect.Message {
	return new(fastReflection_WithdrawalReceipt)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WithdrawalReceipt) Interface() protoreflect.ProtoMessage {
	return (*WithdrawalReceipt)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WithdrawalReceipt) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_WithdrawalReceipt_id, value) {
			return
		}
	}
	if len(x.Txid) != 0 {
		value := protoreflect.ValueOfBytes(x.Txid)
		if !f(fd_WithdrawalReceipt_txid, value) {
			return
		}
	}
	if x.Txout != uint32(0) {
		value := protoreflect.ValueOfUint32(x.Txout)
		if !f(fd_WithdrawalReceipt_txout, value) {
			return
		}
	}
	if x.Amount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Amount)
		if !f(fd_WithdrawalReceipt_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WithdrawalReceipt) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goat.bitcoin.v1.WithdrawalReceipt.id":
		return x.Id != uint64(0)
	case "goat.bitcoin.v1.WithdrawalReceipt.txid":
		return len(x.Txid) != 0
	case "goat.bitcoin.v1.WithdrawalReceipt.txout":
		return x.Txout != uint32(0)
	case "goat.bitcoin.v1.WithdrawalReceipt.amount":
		return x.Amount != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.WithdrawalReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.WithdrawalReceipt does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalReceipt) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.WithdrawalReceipt.id":
		x.Id = uint64(0)
	case "goat.bitcoin.v1.WithdrawalReceipt.txid":
		x.Txid = nil
	case "goat.bitcoin.v1.WithdrawalReceipt.txout":
		x.Txout = uint32(0)
	case "goat.bitcoin.v1.WithdrawalReceipt.amount":
		x.Amount = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.WithdrawalReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.WithdrawalReceipt does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WithdrawalReceipt) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goat.bitcoin.v1.WithdrawalReceipt.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "goat.bitcoin.v1.WithdrawalReceipt.txid":
		value := x.Txid
		return protoreflect.ValueOfBytes(value)
	case "goat.bitcoin.v1.WithdrawalReceipt.txout":
		value := x.Txout
		return protoreflect.ValueOfUint32(value)
	case "goat.bitcoin.v1.WithdrawalReceipt.amount":
		value := x.Amount
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.WithdrawalReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.WithdrawalReceipt does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalReceipt) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.WithdrawalReceipt.id":
		x.Id = value.Uint()
	case "goat.bitcoin.v1.WithdrawalReceipt.txid":
		x.Txid = value.Bytes()
	case "goat.bitcoin.v1.WithdrawalReceipt.txout":
		x.Txout = uint32(value.Uint())
	case "goat.bitcoin.v1.WithdrawalReceipt.amount":
		x.Amount = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.WithdrawalReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.WithdrawalReceipt does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalReceipt) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.WithdrawalReceipt.id":
		panic(fmt.Errorf("field id of message goat.bitcoin.v1.WithdrawalReceipt is not mutable"))
	case "goat.bitcoin.v1.WithdrawalReceipt.txid":
		panic(fmt.Errorf("field txid of message goat.bitcoin.v1.WithdrawalReceipt is not mutable"))
	case "goat.bitcoin.v1.WithdrawalReceipt.txout":
		panic(fmt.Errorf("field txout of message goat.bitcoin.v1.WithdrawalReceipt is not mutable"))
	case "goat.bitcoin.v1.WithdrawalReceipt.amount":
		panic(fmt.Errorf("field amount of message goat.bitcoin.v1.WithdrawalReceipt is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.WithdrawalReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.WithdrawalReceipt does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WithdrawalReceipt) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.WithdrawalReceipt.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.bitcoin.v1.WithdrawalReceipt.txid":
		return protoreflect.ValueOfBytes(nil)
	case "goat.bitcoin.v1.WithdrawalReceipt.txout":
		return protoreflect.ValueOfUint32(uint32(0))
	case "goat.bitcoin.v1.WithdrawalReceipt.amount":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.WithdrawalReceipt"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.WithdrawalReceipt does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WithdrawalReceipt) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goat.bitcoin.v1.WithdrawalReceipt", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WithdrawalReceipt) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalReceipt) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WithdrawalReceipt) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WithdrawalReceipt) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WithdrawalReceipt)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.Txid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Txout != 0 {
			n += 1 + runtime.Sov(uint64(x.Txout))
		}
		if x.Amount != 0 {
			n += 1 + runtime.Sov(uint64(x.Amount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawalReceipt)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Amount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Amount))
			i--
			dAtA[i] = 0x20
		}
		if x.Txout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Txout))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Txid) > 0 {
			i -= len(x.Txid)
			copy(dAtA[i:], x.Txid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Txid)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawalReceipt)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawalReceipt: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawalReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Txid = append(x.Txid[:0], dAtA[iNdEx:postIndex]...)
				if x.Txid == nil {
					x.Txid = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Txout", wireType)
				}
				x.Txout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Txout |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				x.Amount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Amount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_ExecuableQueue_2_list)(nil)

type _ExecuableQueue_2_list struct {
	list *[]*DepositReceipt
}

func (x *_ExecuableQueue_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ExecuableQueue_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ExecuableQueue_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DepositReceipt)
	(*x.list)[i] = concreteValue
}

func (x *_ExecuableQueue_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*DepositReceipt)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ExecuableQueue_2_list) AppendMutable() protoreflect.Value {
	v := new(DepositReceipt)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ExecuableQueue_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ExecuableQueue_2_list) NewElement() protoreflect.Value {
	v := new(DepositReceipt)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ExecuableQueue_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ExecuableQueue_3_list)(nil)

type _ExecuableQueue_3_list struct {
	list *[]*WithdrawalReceipt
}

func (x *_ExecuableQueue_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ExecuableQueue_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_ExecuableQueue_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WithdrawalReceipt)
	(*x.list)[i] = concreteValue
}

func (x *_ExecuableQueue_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WithdrawalReceipt)
	*x.list = append(*x.list, concreteValue)
}

func (x *_ExecuableQueue_3_list) AppendMutable() protoreflect.Value {
	v := new(WithdrawalReceipt)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ExecuableQueue_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_ExecuableQueue_3_list) NewElement() protoreflect.Value {
	v := new(WithdrawalReceipt)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_ExecuableQueue_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_ExecuableQueue_4_list)(nil)

type _ExecuableQueue_4_list struct {
	list *[]uint64
}

func (x *_ExecuableQueue_4_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_ExecuableQueue_4_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_ExecuableQueue_4_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_ExecuableQueue_4_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_ExecuableQueue_4_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message ExecuableQueue at list field RejectedWithdrawals as it is not of Message kind"))
}

func (x *_ExecuableQueue_4_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_ExecuableQueue_4_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_ExecuableQueue_4_list) IsValid() bool {
	return x.list != nil
}

var (
	md_ExecuableQueue                      protoreflect.MessageDescriptor
	fd_ExecuableQueue_block_number         protoreflect.FieldDescriptor
	fd_ExecuableQueue_deposits             protoreflect.FieldDescriptor
	fd_ExecuableQueue_paid_withdrawals     protoreflect.FieldDescriptor
	fd_ExecuableQueue_rejected_withdrawals protoreflect.FieldDescriptor
)

func init() {
	file_goat_bitcoin_v1_bitcoin_proto_init()
	md_ExecuableQueue = File_goat_bitcoin_v1_bitcoin_proto.Messages().ByName("ExecuableQueue")
	fd_ExecuableQueue_block_number = md_ExecuableQueue.Fields().ByName("block_number")
	fd_ExecuableQueue_deposits = md_ExecuableQueue.Fields().ByName("deposits")
	fd_ExecuableQueue_paid_withdrawals = md_ExecuableQueue.Fields().ByName("paid_withdrawals")
	fd_ExecuableQueue_rejected_withdrawals = md_ExecuableQueue.Fields().ByName("rejected_withdrawals")
}

var _ protoreflect.Message = (*fastReflection_ExecuableQueue)(nil)

type fastReflection_ExecuableQueue ExecuableQueue

func (x *ExecuableQueue) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExecuableQueue)(x)
}

func (x *ExecuableQueue) slowProtoReflect() protoreflect.Message {
	mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ExecuableQueue_messageType fastReflection_ExecuableQueue_messageType
var _ protoreflect.MessageType = fastReflection_ExecuableQueue_messageType{}

type fastReflection_ExecuableQueue_messageType struct{}

func (x fastReflection_ExecuableQueue_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExecuableQueue)(nil)
}
func (x fastReflection_ExecuableQueue_messageType) New() protoreflect.Message {
	return new(fastReflection_ExecuableQueue)
}
func (x fastReflection_ExecuableQueue_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExecuableQueue
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExecuableQueue) Descriptor() protoreflect.MessageDescriptor {
	return md_ExecuableQueue
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExecuableQueue) Type() protoreflect.MessageType {
	return _fastReflection_ExecuableQueue_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExecuableQueue) New() protoreflect.Message {
	return new(fastReflection_ExecuableQueue)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExecuableQueue) Interface() protoreflect.ProtoMessage {
	return (*ExecuableQueue)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExecuableQueue) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BlockNumber != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BlockNumber)
		if !f(fd_ExecuableQueue_block_number, value) {
			return
		}
	}
	if len(x.Deposits) != 0 {
		value := protoreflect.ValueOfList(&_ExecuableQueue_2_list{list: &x.Deposits})
		if !f(fd_ExecuableQueue_deposits, value) {
			return
		}
	}
	if len(x.PaidWithdrawals) != 0 {
		value := protoreflect.ValueOfList(&_ExecuableQueue_3_list{list: &x.PaidWithdrawals})
		if !f(fd_ExecuableQueue_paid_withdrawals, value) {
			return
		}
	}
	if len(x.RejectedWithdrawals) != 0 {
		value := protoreflect.ValueOfList(&_ExecuableQueue_4_list{list: &x.RejectedWithdrawals})
		if !f(fd_ExecuableQueue_rejected_withdrawals, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExecuableQueue) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "goat.bitcoin.v1.ExecuableQueue.block_number":
		return x.BlockNumber != uint64(0)
	case "goat.bitcoin.v1.ExecuableQueue.deposits":
		return len(x.Deposits) != 0
	case "goat.bitcoin.v1.ExecuableQueue.paid_withdrawals":
		return len(x.PaidWithdrawals) != 0
	case "goat.bitcoin.v1.ExecuableQueue.rejected_withdrawals":
		return len(x.RejectedWithdrawals) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.ExecuableQueue"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.ExecuableQueue does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecuableQueue) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.ExecuableQueue.block_number":
		x.BlockNumber = uint64(0)
	case "goat.bitcoin.v1.ExecuableQueue.deposits":
		x.Deposits = nil
	case "goat.bitcoin.v1.ExecuableQueue.paid_withdrawals":
		x.PaidWithdrawals = nil
	case "goat.bitcoin.v1.ExecuableQueue.rejected_withdrawals":
		x.RejectedWithdrawals = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.ExecuableQueue"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.ExecuableQueue does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExecuableQueue) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "goat.bitcoin.v1.ExecuableQueue.block_number":
		value := x.BlockNumber
		return protoreflect.ValueOfUint64(value)
	case "goat.bitcoin.v1.ExecuableQueue.deposits":
		if len(x.Deposits) == 0 {
			return protoreflect.ValueOfList(&_ExecuableQueue_2_list{})
		}
		listValue := &_ExecuableQueue_2_list{list: &x.Deposits}
		return protoreflect.ValueOfList(listValue)
	case "goat.bitcoin.v1.ExecuableQueue.paid_withdrawals":
		if len(x.PaidWithdrawals) == 0 {
			return protoreflect.ValueOfList(&_ExecuableQueue_3_list{})
		}
		listValue := &_ExecuableQueue_3_list{list: &x.PaidWithdrawals}
		return protoreflect.ValueOfList(listValue)
	case "goat.bitcoin.v1.ExecuableQueue.rejected_withdrawals":
		if len(x.RejectedWithdrawals) == 0 {
			return protoreflect.ValueOfList(&_ExecuableQueue_4_list{})
		}
		listValue := &_ExecuableQueue_4_list{list: &x.RejectedWithdrawals}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.ExecuableQueue"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.ExecuableQueue does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecuableQueue) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "goat.bitcoin.v1.ExecuableQueue.block_number":
		x.BlockNumber = value.Uint()
	case "goat.bitcoin.v1.ExecuableQueue.deposits":
		lv := value.List()
		clv := lv.(*_ExecuableQueue_2_list)
		x.Deposits = *clv.list
	case "goat.bitcoin.v1.ExecuableQueue.paid_withdrawals":
		lv := value.List()
		clv := lv.(*_ExecuableQueue_3_list)
		x.PaidWithdrawals = *clv.list
	case "goat.bitcoin.v1.ExecuableQueue.rejected_withdrawals":
		lv := value.List()
		clv := lv.(*_ExecuableQueue_4_list)
		x.RejectedWithdrawals = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.ExecuableQueue"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.ExecuableQueue does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecuableQueue) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.ExecuableQueue.deposits":
		if x.Deposits == nil {
			x.Deposits = []*DepositReceipt{}
		}
		value := &_ExecuableQueue_2_list{list: &x.Deposits}
		return protoreflect.ValueOfList(value)
	case "goat.bitcoin.v1.ExecuableQueue.paid_withdrawals":
		if x.PaidWithdrawals == nil {
			x.PaidWithdrawals = []*WithdrawalReceipt{}
		}
		value := &_ExecuableQueue_3_list{list: &x.PaidWithdrawals}
		return protoreflect.ValueOfList(value)
	case "goat.bitcoin.v1.ExecuableQueue.rejected_withdrawals":
		if x.RejectedWithdrawals == nil {
			x.RejectedWithdrawals = []uint64{}
		}
		value := &_ExecuableQueue_4_list{list: &x.RejectedWithdrawals}
		return protoreflect.ValueOfList(value)
	case "goat.bitcoin.v1.ExecuableQueue.block_number":
		panic(fmt.Errorf("field block_number of message goat.bitcoin.v1.ExecuableQueue is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.ExecuableQueue"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.ExecuableQueue does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExecuableQueue) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "goat.bitcoin.v1.ExecuableQueue.block_number":
		return protoreflect.ValueOfUint64(uint64(0))
	case "goat.bitcoin.v1.ExecuableQueue.deposits":
		list := []*DepositReceipt{}
		return protoreflect.ValueOfList(&_ExecuableQueue_2_list{list: &list})
	case "goat.bitcoin.v1.ExecuableQueue.paid_withdrawals":
		list := []*WithdrawalReceipt{}
		return protoreflect.ValueOfList(&_ExecuableQueue_3_list{list: &list})
	case "goat.bitcoin.v1.ExecuableQueue.rejected_withdrawals":
		list := []uint64{}
		return protoreflect.ValueOfList(&_ExecuableQueue_4_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: goat.bitcoin.v1.ExecuableQueue"))
		}
		panic(fmt.Errorf("message goat.bitcoin.v1.ExecuableQueue does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExecuableQueue) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in goat.bitcoin.v1.ExecuableQueue", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExecuableQueue) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExecuableQueue) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExecuableQueue) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExecuableQueue) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExecuableQueue)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BlockNumber != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockNumber))
		}
		if len(x.Deposits) > 0 {
			for _, e := range x.Deposits {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.PaidWithdrawals) > 0 {
			for _, e := range x.PaidWithdrawals {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.RejectedWithdrawals) > 0 {
			l = 0
			for _, e := range x.RejectedWithdrawals {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExecuableQueue)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RejectedWithdrawals) > 0 {
			var pksize2 int
			for _, num := range x.RejectedWithdrawals {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.RejectedWithdrawals {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PaidWithdrawals) > 0 {
			for iNdEx := len(x.PaidWithdrawals) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PaidWithdrawals[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.Deposits) > 0 {
			for iNdEx := len(x.Deposits) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Deposits[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.BlockNumber != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockNumber))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExecuableQueue)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExecuableQueue: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExecuableQueue: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
				}
				x.BlockNumber = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockNumber |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Deposits = append(x.Deposits, &DepositReceipt{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Deposits[len(x.Deposits)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PaidWithdrawals", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PaidWithdrawals = append(x.PaidWithdrawals, &WithdrawalReceipt{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PaidWithdrawals[len(x.PaidWithdrawals)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.RejectedWithdrawals = append(x.RejectedWithdrawals, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.RejectedWithdrawals) == 0 {
						x.RejectedWithdrawals = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.RejectedWithdrawals = append(x.RejectedWithdrawals, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RejectedWithdrawals", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: goat/bitcoin/v1/bitcoin.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Deposit defines the deposit transaction and its proof
type Deposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// block_number the block number that transaction located at
	BlockNumber uint64 `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// tx_index is the index of transaction in the block
	TxIndex uint32 `protobuf:"varint,3,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// tx is the raw transaction withtout witness
	NoWitnessTx []byte `protobuf:"bytes,4,opt,name=no_witness_tx,json=noWitnessTx,proto3" json:"no_witness_tx,omitempty"`
	OutputIndex uint32 `protobuf:"varint,5,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// intermediate proof is the proof without the txid and merkel root
	IntermediateProof []byte `protobuf:"bytes,6,opt,name=intermediate_proof,json=intermediateProof,proto3" json:"intermediate_proof,omitempty"`
	// evm_address is the user wallet address in goat evm
	EvmAddress []byte `protobuf:"bytes,7,opt,name=evm_address,json=evmAddress,proto3" json:"evm_address,omitempty"`
	// relayer_pubkey is the compressed secp256k1 public key which managed by the relayer group
	RelayerPubkey *v1.PublicKey `protobuf:"bytes,8,opt,name=relayer_pubkey,json=relayerPubkey,proto3" json:"relayer_pubkey,omitempty"`
}

func (x *Deposit) Reset() {
	*x = Deposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deposit) ProtoMessage() {}

// Deprecated: Use Deposit.ProtoReflect.Descriptor instead.
func (*Deposit) Descriptor() ([]byte, []int) {
	return file_goat_bitcoin_v1_bitcoin_proto_rawDescGZIP(), []int{0}
}

func (x *Deposit) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Deposit) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Deposit) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Deposit) GetNoWitnessTx() []byte {
	if x != nil {
		return x.NoWitnessTx
	}
	return nil
}

func (x *Deposit) GetOutputIndex() uint32 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *Deposit) GetIntermediateProof() []byte {
	if x != nil {
		return x.IntermediateProof
	}
	return nil
}

func (x *Deposit) GetEvmAddress() []byte {
	if x != nil {
		return x.EvmAddress
	}
	return nil
}

func (x *Deposit) GetRelayerPubkey() *v1.PublicKey {
	if x != nil {
		return x.RelayerPubkey
	}
	return nil
}

// DepositReceipt
type DepositReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid    []byte `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Txout   uint32 `protobuf:"varint,2,opt,name=txout,proto3" json:"txout,omitempty"`
	Address []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount  uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DepositReceipt) Reset() {
	*x = DepositReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositReceipt) ProtoMessage() {}

// Deprecated: Use DepositReceipt.ProtoReflect.Descriptor instead.
func (*DepositReceipt) Descriptor() ([]byte, []int) {
	return file_goat_bitcoin_v1_bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *DepositReceipt) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DepositReceipt) GetTxout() uint32 {
	if x != nil {
		return x.Txout
	}
	return 0
}

func (x *DepositReceipt) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DepositReceipt) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// WithdrawalReceipt
type WithdrawalReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Txid   []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	Txout  uint32 `protobuf:"varint,3,opt,name=txout,proto3" json:"txout,omitempty"`
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *WithdrawalReceipt) Reset() {
	*x = WithdrawalReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalReceipt) ProtoMessage() {}

// Deprecated: Use WithdrawalReceipt.ProtoReflect.Descriptor instead.
func (*WithdrawalReceipt) Descriptor() ([]byte, []int) {
	return file_goat_bitcoin_v1_bitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *WithdrawalReceipt) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithdrawalReceipt) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *WithdrawalReceipt) GetTxout() uint32 {
	if x != nil {
		return x.Txout
	}
	return 0
}

func (x *WithdrawalReceipt) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// ExecuableQueue
type ExecuableQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber         uint64               `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Deposits            []*DepositReceipt    `protobuf:"bytes,2,rep,name=deposits,proto3" json:"deposits,omitempty"`
	PaidWithdrawals     []*WithdrawalReceipt `protobuf:"bytes,3,rep,name=paid_withdrawals,json=paidWithdrawals,proto3" json:"paid_withdrawals,omitempty"`
	RejectedWithdrawals []uint64             `protobuf:"varint,4,rep,packed,name=rejected_withdrawals,json=rejectedWithdrawals,proto3" json:"rejected_withdrawals,omitempty"`
}

func (x *ExecuableQueue) Reset() {
	*x = ExecuableQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goat_bitcoin_v1_bitcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuableQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuableQueue) ProtoMessage() {}

// Deprecated: Use ExecuableQueue.ProtoReflect.Descriptor instead.
func (*ExecuableQueue) Descriptor() ([]byte, []int) {
	return file_goat_bitcoin_v1_bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *ExecuableQueue) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ExecuableQueue) GetDeposits() []*DepositReceipt {
	if x != nil {
		return x.Deposits
	}
	return nil
}

func (x *ExecuableQueue) GetPaidWithdrawals() []*WithdrawalReceipt {
	if x != nil {
		return x.PaidWithdrawals
	}
	return nil
}

func (x *ExecuableQueue) GetRejectedWithdrawals() []uint64 {
	if x != nil {
		return x.RejectedWithdrawals
	}
	return nil
}

var File_goat_bitcoin_v1_bitcoin_proto protoreflect.FileDescriptor

var file_goat_bitcoin_v1_bitcoin_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x67, 0x6f, 0x61, 0x74, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x1a, 0x1d, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbb, 0x02, 0x0a, 0x07, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e, 0x6f, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x6d,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x65, 0x76, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x22, 0x6c, 0x0a,
	0x0e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x74, 0x78, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x65, 0x0a, 0x11, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x78, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x78, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x61, 0x62, 0x6c, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x61,
	0x74, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x08, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x61, 0x74, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x69, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x42, 0xbc, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x61, 0x74, 0x2e, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x61, 0x74,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x61, 0x74, 0x2f, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x76, 0x31,
	0x3b, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x47, 0x42, 0x58,
	0xaa, 0x02, 0x0f, 0x47, 0x6f, 0x61, 0x74, 0x2e, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0f, 0x47, 0x6f, 0x61, 0x74, 0x5c, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69,
	0x6e, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x47, 0x6f, 0x61, 0x74, 0x5c, 0x42, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x11, 0x47, 0x6f, 0x61, 0x74, 0x3a, 0x3a, 0x42, 0x69, 0x74, 0x63, 0x6f,
	0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goat_bitcoin_v1_bitcoin_proto_rawDescOnce sync.Once
	file_goat_bitcoin_v1_bitcoin_proto_rawDescData = file_goat_bitcoin_v1_bitcoin_proto_rawDesc
)

func file_goat_bitcoin_v1_bitcoin_proto_rawDescGZIP() []byte {
	file_goat_bitcoin_v1_bitcoin_proto_rawDescOnce.Do(func() {
		file_goat_bitcoin_v1_bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_goat_bitcoin_v1_bitcoin_proto_rawDescData)
	})
	return file_goat_bitcoin_v1_bitcoin_proto_rawDescData
}

var file_goat_bitcoin_v1_bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_goat_bitcoin_v1_bitcoin_proto_goTypes = []interface{}{
	(*Deposit)(nil),           // 0: goat.bitcoin.v1.Deposit
	(*DepositReceipt)(nil),    // 1: goat.bitcoin.v1.DepositReceipt
	(*WithdrawalReceipt)(nil), // 2: goat.bitcoin.v1.WithdrawalReceipt
	(*ExecuableQueue)(nil),    // 3: goat.bitcoin.v1.ExecuableQueue
	(*v1.PublicKey)(nil),      // 4: goat.relayer.v1.PublicKey
}
var file_goat_bitcoin_v1_bitcoin_proto_depIdxs = []int32{
	4, // 0: goat.bitcoin.v1.Deposit.relayer_pubkey:type_name -> goat.relayer.v1.PublicKey
	1, // 1: goat.bitcoin.v1.ExecuableQueue.deposits:type_name -> goat.bitcoin.v1.DepositReceipt
	2, // 2: goat.bitcoin.v1.ExecuableQueue.paid_withdrawals:type_name -> goat.bitcoin.v1.WithdrawalReceipt
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_goat_bitcoin_v1_bitcoin_proto_init() }
func file_goat_bitcoin_v1_bitcoin_proto_init() {
	if File_goat_bitcoin_v1_bitcoin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goat_bitcoin_v1_bitcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_bitcoin_v1_bitcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_bitcoin_v1_bitcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goat_bitcoin_v1_bitcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuableQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goat_bitcoin_v1_bitcoin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goat_bitcoin_v1_bitcoin_proto_goTypes,
		DependencyIndexes: file_goat_bitcoin_v1_bitcoin_proto_depIdxs,
		MessageInfos:      file_goat_bitcoin_v1_bitcoin_proto_msgTypes,
	}.Build()
	File_goat_bitcoin_v1_bitcoin_proto = out.File
	file_goat_bitcoin_v1_bitcoin_proto_rawDesc = nil
	file_goat_bitcoin_v1_bitcoin_proto_goTypes = nil
	file_goat_bitcoin_v1_bitcoin_proto_depIdxs = nil
}
