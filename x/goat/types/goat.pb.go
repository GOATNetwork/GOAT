// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/goat/v1/goat.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExecutionPayload
type ExecutionPayload struct {
	ParentHash    []byte             `protobuf:"bytes,1,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	FeeRecipient  []byte             `protobuf:"bytes,2,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	StateRoot     []byte             `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ReceiptsRoot  []byte             `protobuf:"bytes,4,opt,name=receipts_root,json=receiptsRoot,proto3" json:"receipts_root,omitempty"`
	LogsBloom     []byte             `protobuf:"bytes,5,opt,name=logs_bloom,json=logsBloom,proto3" json:"logs_bloom,omitempty"`
	PrevRandao    []byte             `protobuf:"bytes,6,opt,name=prev_randao,json=prevRandao,proto3" json:"prev_randao,omitempty"`
	BlockNumber   uint64             `protobuf:"varint,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	GasLimit      uint64             `protobuf:"varint,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	GasUsed       uint64             `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	Timestamp     uint64             `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ExtraData     []byte             `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3" json:"extra_data,omitempty"`
	BaseFeePerGas []byte             `protobuf:"bytes,12,opt,name=base_fee_per_gas,json=baseFeePerGas,proto3" json:"base_fee_per_gas,omitempty"`
	BlockHash     []byte             `protobuf:"bytes,13,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Transactions  [][]byte           `protobuf:"bytes,14,rep,name=transactions,proto3" json:"transactions,omitempty"`
	BeaconRoot    []byte             `protobuf:"bytes,15,opt,name=beacon_root,json=beaconRoot,proto3" json:"beacon_root,omitempty"`
	BlobGasUsed   uint64             `protobuf:"varint,16,opt,name=blob_gas_used,json=blobGasUsed,proto3" json:"blob_gas_used,omitempty"`
	ExcessBlobGas uint64             `protobuf:"varint,17,opt,name=excess_blob_gas,json=excessBlobGas,proto3" json:"excess_blob_gas,omitempty"`
	GasRevenue    *GasRevenueReq     `protobuf:"bytes,18,opt,name=gas_revenue,json=gasRevenue,proto3" json:"gas_revenue,omitempty"`
	AddVoterReq   []*AddVoterReq     `protobuf:"bytes,19,rep,name=add_voter_req,json=addVoterReq,proto3" json:"add_voter_req,omitempty"`
	RmVoterReq    []*RemoveVoterReq  `protobuf:"bytes,20,rep,name=rm_voter_req,json=rmVoterReq,proto3" json:"rm_voter_req,omitempty"`
	WithdrawalReq []*WithdrawalReq   `protobuf:"bytes,21,rep,name=withdrawal_req,json=withdrawalReq,proto3" json:"withdrawal_req,omitempty"`
	RbfReq        []*ReplaceByFeeReq `protobuf:"bytes,22,rep,name=rbf_req,json=rbfReq,proto3" json:"rbf_req,omitempty"`
	Cancel1Req    []*Cancel1Req      `protobuf:"bytes,23,rep,name=cancel1_req,json=cancel1Req,proto3" json:"cancel1_req,omitempty"`
	Requests      [][]byte           `protobuf:"bytes,24,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *ExecutionPayload) Reset()         { *m = ExecutionPayload{} }
func (m *ExecutionPayload) String() string { return proto.CompactTextString(m) }
func (*ExecutionPayload) ProtoMessage()    {}
func (*ExecutionPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{0}
}
func (m *ExecutionPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionPayload.Merge(m, src)
}
func (m *ExecutionPayload) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionPayload proto.InternalMessageInfo

func (m *ExecutionPayload) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *ExecutionPayload) GetFeeRecipient() []byte {
	if m != nil {
		return m.FeeRecipient
	}
	return nil
}

func (m *ExecutionPayload) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *ExecutionPayload) GetReceiptsRoot() []byte {
	if m != nil {
		return m.ReceiptsRoot
	}
	return nil
}

func (m *ExecutionPayload) GetLogsBloom() []byte {
	if m != nil {
		return m.LogsBloom
	}
	return nil
}

func (m *ExecutionPayload) GetPrevRandao() []byte {
	if m != nil {
		return m.PrevRandao
	}
	return nil
}

func (m *ExecutionPayload) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ExecutionPayload) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ExecutionPayload) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *ExecutionPayload) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ExecutionPayload) GetExtraData() []byte {
	if m != nil {
		return m.ExtraData
	}
	return nil
}

func (m *ExecutionPayload) GetBaseFeePerGas() []byte {
	if m != nil {
		return m.BaseFeePerGas
	}
	return nil
}

func (m *ExecutionPayload) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ExecutionPayload) GetTransactions() [][]byte {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *ExecutionPayload) GetBeaconRoot() []byte {
	if m != nil {
		return m.BeaconRoot
	}
	return nil
}

func (m *ExecutionPayload) GetBlobGasUsed() uint64 {
	if m != nil {
		return m.BlobGasUsed
	}
	return 0
}

func (m *ExecutionPayload) GetExcessBlobGas() uint64 {
	if m != nil {
		return m.ExcessBlobGas
	}
	return 0
}

func (m *ExecutionPayload) GetGasRevenue() *GasRevenueReq {
	if m != nil {
		return m.GasRevenue
	}
	return nil
}

func (m *ExecutionPayload) GetAddVoterReq() []*AddVoterReq {
	if m != nil {
		return m.AddVoterReq
	}
	return nil
}

func (m *ExecutionPayload) GetRmVoterReq() []*RemoveVoterReq {
	if m != nil {
		return m.RmVoterReq
	}
	return nil
}

func (m *ExecutionPayload) GetWithdrawalReq() []*WithdrawalReq {
	if m != nil {
		return m.WithdrawalReq
	}
	return nil
}

func (m *ExecutionPayload) GetRbfReq() []*ReplaceByFeeReq {
	if m != nil {
		return m.RbfReq
	}
	return nil
}

func (m *ExecutionPayload) GetCancel1Req() []*Cancel1Req {
	if m != nil {
		return m.Cancel1Req
	}
	return nil
}

func (m *ExecutionPayload) GetRequests() [][]byte {
	if m != nil {
		return m.Requests
	}
	return nil
}

// GasRevenueReq
type GasRevenueReq struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *GasRevenueReq) Reset()         { *m = GasRevenueReq{} }
func (m *GasRevenueReq) String() string { return proto.CompactTextString(m) }
func (*GasRevenueReq) ProtoMessage()    {}
func (*GasRevenueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{1}
}
func (m *GasRevenueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasRevenueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasRevenueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasRevenueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasRevenueReq.Merge(m, src)
}
func (m *GasRevenueReq) XXX_Size() int {
	return m.Size()
}
func (m *GasRevenueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GasRevenueReq.DiscardUnknown(m)
}

var xxx_messageInfo_GasRevenueReq proto.InternalMessageInfo

// AddVoterReq
type AddVoterReq struct {
	Voter      []byte `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	PubkeyHash []byte `protobuf:"bytes,2,opt,name=pubkey_hash,json=pubkeyHash,proto3" json:"pubkey_hash,omitempty"`
}

func (m *AddVoterReq) Reset()         { *m = AddVoterReq{} }
func (m *AddVoterReq) String() string { return proto.CompactTextString(m) }
func (*AddVoterReq) ProtoMessage()    {}
func (*AddVoterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{2}
}
func (m *AddVoterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddVoterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddVoterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddVoterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddVoterReq.Merge(m, src)
}
func (m *AddVoterReq) XXX_Size() int {
	return m.Size()
}
func (m *AddVoterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddVoterReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddVoterReq proto.InternalMessageInfo

func (m *AddVoterReq) GetVoter() []byte {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *AddVoterReq) GetPubkeyHash() []byte {
	if m != nil {
		return m.PubkeyHash
	}
	return nil
}

// RemoveVoterReq
type RemoveVoterReq struct {
	Voter []byte `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *RemoveVoterReq) Reset()         { *m = RemoveVoterReq{} }
func (m *RemoveVoterReq) String() string { return proto.CompactTextString(m) }
func (*RemoveVoterReq) ProtoMessage()    {}
func (*RemoveVoterReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{3}
}
func (m *RemoveVoterReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveVoterReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveVoterReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveVoterReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveVoterReq.Merge(m, src)
}
func (m *RemoveVoterReq) XXX_Size() int {
	return m.Size()
}
func (m *RemoveVoterReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveVoterReq.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveVoterReq proto.InternalMessageInfo

func (m *RemoveVoterReq) GetVoter() []byte {
	if m != nil {
		return m.Voter
	}
	return nil
}

// WithdrawalReq
type WithdrawalReq struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount     uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	MaxTxPrice uint64 `protobuf:"varint,3,opt,name=max_tx_price,json=maxTxPrice,proto3" json:"max_tx_price,omitempty"`
	Address    string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *WithdrawalReq) Reset()         { *m = WithdrawalReq{} }
func (m *WithdrawalReq) String() string { return proto.CompactTextString(m) }
func (*WithdrawalReq) ProtoMessage()    {}
func (*WithdrawalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{4}
}
func (m *WithdrawalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalReq.Merge(m, src)
}
func (m *WithdrawalReq) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalReq.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalReq proto.InternalMessageInfo

func (m *WithdrawalReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WithdrawalReq) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *WithdrawalReq) GetMaxTxPrice() uint64 {
	if m != nil {
		return m.MaxTxPrice
	}
	return 0
}

func (m *WithdrawalReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// ReplaceByFeeReq
type ReplaceByFeeReq struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxTxPrice uint64 `protobuf:"varint,2,opt,name=max_tx_price,json=maxTxPrice,proto3" json:"max_tx_price,omitempty"`
}

func (m *ReplaceByFeeReq) Reset()         { *m = ReplaceByFeeReq{} }
func (m *ReplaceByFeeReq) String() string { return proto.CompactTextString(m) }
func (*ReplaceByFeeReq) ProtoMessage()    {}
func (*ReplaceByFeeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{5}
}
func (m *ReplaceByFeeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplaceByFeeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplaceByFeeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplaceByFeeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplaceByFeeReq.Merge(m, src)
}
func (m *ReplaceByFeeReq) XXX_Size() int {
	return m.Size()
}
func (m *ReplaceByFeeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplaceByFeeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReplaceByFeeReq proto.InternalMessageInfo

func (m *ReplaceByFeeReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReplaceByFeeReq) GetMaxTxPrice() uint64 {
	if m != nil {
		return m.MaxTxPrice
	}
	return 0
}

// Cancel1Req
type Cancel1Req struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Cancel1Req) Reset()         { *m = Cancel1Req{} }
func (m *Cancel1Req) String() string { return proto.CompactTextString(m) }
func (*Cancel1Req) ProtoMessage()    {}
func (*Cancel1Req) Descriptor() ([]byte, []int) {
	return fileDescriptor_e240fa210386b3d7, []int{6}
}
func (m *Cancel1Req) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cancel1Req) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cancel1Req.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cancel1Req) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancel1Req.Merge(m, src)
}
func (m *Cancel1Req) XXX_Size() int {
	return m.Size()
}
func (m *Cancel1Req) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancel1Req.DiscardUnknown(m)
}

var xxx_messageInfo_Cancel1Req proto.InternalMessageInfo

func (m *Cancel1Req) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*ExecutionPayload)(nil), "goat.goat.v1.ExecutionPayload")
	proto.RegisterType((*GasRevenueReq)(nil), "goat.goat.v1.GasRevenueReq")
	proto.RegisterType((*AddVoterReq)(nil), "goat.goat.v1.AddVoterReq")
	proto.RegisterType((*RemoveVoterReq)(nil), "goat.goat.v1.RemoveVoterReq")
	proto.RegisterType((*WithdrawalReq)(nil), "goat.goat.v1.WithdrawalReq")
	proto.RegisterType((*ReplaceByFeeReq)(nil), "goat.goat.v1.ReplaceByFeeReq")
	proto.RegisterType((*Cancel1Req)(nil), "goat.goat.v1.Cancel1Req")
}

func init() { proto.RegisterFile("goat/goat/v1/goat.proto", fileDescriptor_e240fa210386b3d7) }

var fileDescriptor_e240fa210386b3d7 = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x8e, 0x9d, 0x34, 0x8e, 0x8f, 0xed, 0x24, 0x1d, 0xd2, 0x76, 0x92, 0x26, 0x8e, 0x31, 0x52,
	0xb1, 0x90, 0x70, 0x48, 0x91, 0x90, 0x90, 0x00, 0x09, 0xb7, 0x34, 0xad, 0x84, 0x50, 0xb4, 0xe2,
	0x47, 0x70, 0xb3, 0x3a, 0xbb, 0x7b, 0xb2, 0x5e, 0xc5, 0xbb, 0xe3, 0xcc, 0x8c, 0x1d, 0xe7, 0x2d,
	0x78, 0x0c, 0x2e, 0xb9, 0xe0, 0x21, 0x7a, 0x59, 0x71, 0x85, 0x90, 0xa8, 0x50, 0x72, 0xc1, 0x6b,
	0xa0, 0x39, 0xe3, 0x38, 0xb6, 0xe1, 0x66, 0x77, 0xce, 0x37, 0xdf, 0xf7, 0xed, 0x99, 0x73, 0x66,
	0x66, 0xe1, 0x51, 0xaa, 0xd0, 0x1e, 0xf1, 0x63, 0x7c, 0xcc, 0xef, 0xee, 0x50, 0x2b, 0xab, 0x44,
	0x9d, 0xc7, 0xfc, 0x18, 0x1f, 0xef, 0xdd, 0xc7, 0x3c, 0x2b, 0xd4, 0x11, 0x3f, 0x3d, 0x61, 0x6f,
	0x37, 0x56, 0x26, 0x57, 0x26, 0xe4, 0xe8, 0xc8, 0x07, 0xd3, 0xa9, 0x9d, 0x54, 0xa5, 0xca, 0xe3,
	0x6e, 0xe4, 0xd1, 0xf6, 0x5f, 0x15, 0xd8, 0xfe, 0x6a, 0x42, 0xf1, 0xc8, 0x66, 0xaa, 0x38, 0xc5,
	0xab, 0x81, 0xc2, 0x44, 0x1c, 0x42, 0x6d, 0x88, 0x9a, 0x0a, 0x1b, 0xf6, 0xd1, 0xf4, 0x65, 0xa9,
	0x55, 0xea, 0xd4, 0x03, 0xf0, 0xd0, 0x4b, 0x34, 0x7d, 0xf1, 0x1e, 0x34, 0xce, 0x88, 0x42, 0x4d,
	0x71, 0x36, 0xcc, 0xa8, 0xb0, 0xb2, 0xcc, 0x94, 0xfa, 0x19, 0x51, 0x70, 0x8b, 0x89, 0x03, 0x00,
	0x63, 0xd1, 0x52, 0xa8, 0x95, 0xb2, 0x72, 0x95, 0x19, 0x55, 0x46, 0x02, 0xa5, 0xac, 0xf3, 0xd0,
	0x14, 0x53, 0x36, 0xb4, 0xc6, 0x33, 0xd6, 0xbc, 0xc7, 0x2d, 0xc8, 0xa4, 0x03, 0x80, 0x81, 0x4a,
	0x4d, 0x18, 0x0d, 0x94, 0xca, 0xe5, 0x3d, 0xef, 0xe1, 0x90, 0x9e, 0x03, 0x38, 0x51, 0x4d, 0xe3,
	0x50, 0x63, 0x91, 0xa0, 0x92, 0xeb, 0xd3, 0x44, 0x35, 0x8d, 0x03, 0x46, 0xc4, 0xbb, 0x50, 0x8f,
	0x06, 0x2a, 0x3e, 0x0f, 0x8b, 0x51, 0x1e, 0x91, 0x96, 0x95, 0x56, 0xa9, 0xb3, 0x16, 0xd4, 0x18,
	0xfb, 0x86, 0x21, 0xf1, 0x18, 0xaa, 0x29, 0x9a, 0x70, 0x90, 0xe5, 0x99, 0x95, 0x1b, 0x3c, 0xbf,
	0x91, 0xa2, 0xf9, 0xda, 0xc5, 0x62, 0x17, 0xdc, 0x38, 0x1c, 0x19, 0x4a, 0x64, 0x95, 0xe7, 0x2a,
	0x29, 0x9a, 0xef, 0x0c, 0x25, 0x62, 0x1f, 0xaa, 0x36, 0xcb, 0xc9, 0x58, 0xcc, 0x87, 0x12, 0x78,
	0xee, 0x0e, 0x70, 0x89, 0xd3, 0xc4, 0x6a, 0x0c, 0x13, 0xb4, 0x28, 0x6b, 0x3e, 0x71, 0x46, 0x9e,
	0xa3, 0x45, 0xf1, 0x3e, 0x6c, 0x47, 0x68, 0x28, 0x74, 0x55, 0x1c, 0x92, 0x0e, 0x53, 0x34, 0xb2,
	0xce, 0xa4, 0x86, 0xc3, 0x5f, 0x10, 0x9d, 0x92, 0x3e, 0x41, 0xe3, 0x7c, 0xfc, 0x02, 0xb8, 0x13,
	0x0d, 0xef, 0xc3, 0x08, 0x37, 0xa2, 0x0d, 0x75, 0xab, 0xb1, 0x30, 0x18, 0xbb, 0xfe, 0x19, 0xb9,
	0xd9, 0x5a, 0x75, 0x35, 0x9c, 0xc7, 0x5c, 0x91, 0x22, 0xc2, 0x58, 0x15, 0xbe, 0xcc, 0x5b, 0xbe,
	0x48, 0x1e, 0xe2, 0x22, 0xb7, 0xa1, 0x11, 0x0d, 0x54, 0x14, 0xce, 0x56, 0xba, 0x3d, 0xab, 0x52,
	0x74, 0x32, 0x5d, 0xed, 0x13, 0xd8, 0xa2, 0x49, 0x4c, 0x86, 0x5b, 0xc1, 0x54, 0x79, 0x9f, 0x59,
	0x0d, 0x0f, 0xf7, 0x3c, 0x57, 0x7c, 0x06, 0x35, 0x67, 0xa3, 0x69, 0x4c, 0xc5, 0x88, 0xa4, 0x68,
	0x95, 0x3a, 0xb5, 0xa7, 0x8f, 0xbb, 0xf3, 0xfb, 0xb6, 0x7b, 0x82, 0x26, 0xf0, 0xf3, 0x01, 0x5d,
	0x04, 0x90, 0xce, 0x42, 0xf1, 0x39, 0x34, 0x30, 0x49, 0xc2, 0xb1, 0xb2, 0xa4, 0x43, 0x4d, 0x17,
	0xf2, 0x9d, 0xd6, 0x6a, 0xa7, 0xf6, 0x74, 0x77, 0x51, 0xff, 0x65, 0x92, 0x7c, 0xef, 0x18, 0x4e,
	0x5d, 0xc3, 0xbb, 0x40, 0x7c, 0x01, 0x75, 0x9d, 0xcf, 0xa9, 0x77, 0x58, 0xbd, 0xbf, 0xa8, 0x0e,
	0x28, 0x57, 0x63, 0x9a, 0x19, 0x80, 0xce, 0x67, 0xfa, 0x1e, 0x6c, 0x5e, 0x66, 0xb6, 0x9f, 0x68,
	0xbc, 0xc4, 0x01, 0x3b, 0x3c, 0x60, 0x87, 0xa5, 0xfc, 0x7f, 0x98, 0x71, 0x9c, 0x41, 0xe3, 0x72,
	0x3e, 0x14, 0x9f, 0x40, 0x45, 0x47, 0x67, 0x2c, 0x7e, 0xc8, 0xe2, 0x83, 0xe5, 0xcf, 0x0f, 0x07,
	0x18, 0x53, 0xef, 0xea, 0x05, 0xf1, 0xf2, 0xd7, 0x75, 0x74, 0xe6, 0x74, 0x9f, 0x42, 0x2d, 0xc6,
	0x22, 0xa6, 0xc1, 0x31, 0x6b, 0x1f, 0xb1, 0x56, 0x2e, 0x6a, 0x9f, 0x79, 0x02, 0xa7, 0x1d, 0xcf,
	0xc6, 0x62, 0x0f, 0x36, 0x34, 0x5d, 0x8c, 0xc8, 0x58, 0x23, 0x25, 0x6f, 0x80, 0x59, 0xdc, 0xfe,
	0x11, 0x1a, 0x0b, 0xe5, 0x16, 0x2f, 0x61, 0x1d, 0x73, 0x35, 0x2a, 0xfc, 0x79, 0xab, 0xf6, 0x3e,
	0x7a, 0xfd, 0xf6, 0x70, 0xe5, 0xcf, 0xb7, 0x87, 0x0f, 0xfc, 0x65, 0x61, 0x92, 0xf3, 0x6e, 0xa6,
	0x8e, 0x72, 0xb4, 0xfd, 0xee, 0xab, 0xc2, 0xfe, 0xfe, 0xdb, 0x87, 0x30, 0xbd, 0x45, 0x5e, 0x15,
	0xf6, 0x97, 0x7f, 0x7e, 0xfd, 0xa0, 0x14, 0x4c, 0xf5, 0xed, 0xe7, 0x50, 0x9b, 0xeb, 0x84, 0xd8,
	0x81, 0x7b, 0x5c, 0xf9, 0xe9, 0x75, 0xe1, 0x03, 0x3e, 0xa1, 0xa3, 0xe8, 0x9c, 0xae, 0xfc, 0x06,
	0x2e, 0x4f, 0x4f, 0x28, 0x43, 0x6e, 0x07, 0xb7, 0x9f, 0xc0, 0xe6, 0x62, 0x47, 0xfe, 0xdf, 0xa8,
	0x6d, 0xa0, 0xb1, 0x50, 0x77, 0xb1, 0x09, 0xe5, 0x2c, 0x61, 0xce, 0x5a, 0x50, 0xce, 0x12, 0xf1,
	0x70, 0xb6, 0xb0, 0x32, 0x63, 0xd3, 0x48, 0xb4, 0xa0, 0x9e, 0xe3, 0x24, 0xb4, 0x93, 0x70, 0xa8,
	0xb3, 0x98, 0xf8, 0x22, 0x5a, 0x0b, 0x20, 0xc7, 0xc9, 0xb7, 0x93, 0x53, 0x87, 0x08, 0x09, 0x15,
	0x4c, 0x12, 0x4d, 0xc6, 0xf8, 0x9a, 0x04, 0xb7, 0x61, 0xfb, 0x19, 0x6c, 0x2d, 0xf5, 0xeb, 0x3f,
	0x9f, 0x5d, 0xb6, 0x2f, 0x2f, 0xdb, 0xb7, 0xf7, 0x01, 0xee, 0x1a, 0xb7, 0xac, 0xef, 0xf5, 0x5e,
	0x5f, 0x37, 0x4b, 0x6f, 0xae, 0x9b, 0xa5, 0xbf, 0xaf, 0x9b, 0xa5, 0x9f, 0x6f, 0x9a, 0x2b, 0x6f,
	0x6e, 0x9a, 0x2b, 0x7f, 0xdc, 0x34, 0x57, 0x7e, 0xea, 0xa4, 0x99, 0xed, 0x8f, 0xa2, 0x6e, 0xac,
	0x72, 0xfe, 0x07, 0x14, 0x64, 0x2f, 0x95, 0x3e, 0xf7, 0xff, 0x85, 0x89, 0x7f, 0xd9, 0xab, 0x21,
	0x99, 0x68, 0x9d, 0xef, 0xf2, 0x8f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x4a, 0x9a, 0x4b,
	0x38, 0x06, 0x00, 0x00,
}

func (m *ExecutionPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for iNdEx := len(m.Requests) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Requests[iNdEx])
			copy(dAtA[i:], m.Requests[iNdEx])
			i = encodeVarintGoat(dAtA, i, uint64(len(m.Requests[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Cancel1Req) > 0 {
		for iNdEx := len(m.Cancel1Req) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cancel1Req[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.RbfReq) > 0 {
		for iNdEx := len(m.RbfReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RbfReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	if len(m.WithdrawalReq) > 0 {
		for iNdEx := len(m.WithdrawalReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawalReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.RmVoterReq) > 0 {
		for iNdEx := len(m.RmVoterReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RmVoterReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.AddVoterReq) > 0 {
		for iNdEx := len(m.AddVoterReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AddVoterReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGoat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.GasRevenue != nil {
		{
			size, err := m.GasRevenue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGoat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.ExcessBlobGas != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.ExcessBlobGas))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BlobGasUsed != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.BlobGasUsed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.BeaconRoot) > 0 {
		i -= len(m.BeaconRoot)
		copy(dAtA[i:], m.BeaconRoot)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.BeaconRoot)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transactions[iNdEx])
			copy(dAtA[i:], m.Transactions[iNdEx])
			i = encodeVarintGoat(dAtA, i, uint64(len(m.Transactions[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.BaseFeePerGas) > 0 {
		i -= len(m.BaseFeePerGas)
		copy(dAtA[i:], m.BaseFeePerGas)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.BaseFeePerGas)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ExtraData) > 0 {
		i -= len(m.ExtraData)
		copy(dAtA[i:], m.ExtraData)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.ExtraData)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Timestamp != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x50
	}
	if m.GasUsed != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x48
	}
	if m.GasLimit != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockNumber != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PrevRandao) > 0 {
		i -= len(m.PrevRandao)
		copy(dAtA[i:], m.PrevRandao)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.PrevRandao)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LogsBloom) > 0 {
		i -= len(m.LogsBloom)
		copy(dAtA[i:], m.LogsBloom)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.LogsBloom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReceiptsRoot) > 0 {
		i -= len(m.ReceiptsRoot)
		copy(dAtA[i:], m.ReceiptsRoot)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.ReceiptsRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeeRecipient) > 0 {
		i -= len(m.FeeRecipient)
		copy(dAtA[i:], m.FeeRecipient)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.FeeRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GasRevenueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasRevenueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasRevenueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGoat(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}

func (m *AddVoterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddVoterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddVoterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubkeyHash) > 0 {
		i -= len(m.PubkeyHash)
		copy(dAtA[i:], m.PubkeyHash)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.PubkeyHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveVoterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveVoterReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveVoterReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGoat(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.MaxTxPrice != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.MaxTxPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReplaceByFeeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplaceByFeeReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplaceByFeeReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTxPrice != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.MaxTxPrice))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Cancel1Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cancel1Req) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cancel1Req) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintGoat(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGoat(dAtA []byte, offset int, v uint64) int {
	offset -= sovGoat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutionPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.FeeRecipient)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.ReceiptsRoot)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.LogsBloom)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.PrevRandao)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovGoat(uint64(m.BlockNumber))
	}
	if m.GasLimit != 0 {
		n += 1 + sovGoat(uint64(m.GasLimit))
	}
	if m.GasUsed != 0 {
		n += 1 + sovGoat(uint64(m.GasUsed))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGoat(uint64(m.Timestamp))
	}
	l = len(m.ExtraData)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.BaseFeePerGas)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, b := range m.Transactions {
			l = len(b)
			n += 1 + l + sovGoat(uint64(l))
		}
	}
	l = len(m.BeaconRoot)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	if m.BlobGasUsed != 0 {
		n += 2 + sovGoat(uint64(m.BlobGasUsed))
	}
	if m.ExcessBlobGas != 0 {
		n += 2 + sovGoat(uint64(m.ExcessBlobGas))
	}
	if m.GasRevenue != nil {
		l = m.GasRevenue.Size()
		n += 2 + l + sovGoat(uint64(l))
	}
	if len(m.AddVoterReq) > 0 {
		for _, e := range m.AddVoterReq {
			l = e.Size()
			n += 2 + l + sovGoat(uint64(l))
		}
	}
	if len(m.RmVoterReq) > 0 {
		for _, e := range m.RmVoterReq {
			l = e.Size()
			n += 2 + l + sovGoat(uint64(l))
		}
	}
	if len(m.WithdrawalReq) > 0 {
		for _, e := range m.WithdrawalReq {
			l = e.Size()
			n += 2 + l + sovGoat(uint64(l))
		}
	}
	if len(m.RbfReq) > 0 {
		for _, e := range m.RbfReq {
			l = e.Size()
			n += 2 + l + sovGoat(uint64(l))
		}
	}
	if len(m.Cancel1Req) > 0 {
		for _, e := range m.Cancel1Req {
			l = e.Size()
			n += 2 + l + sovGoat(uint64(l))
		}
	}
	if len(m.Requests) > 0 {
		for _, b := range m.Requests {
			l = len(b)
			n += 2 + l + sovGoat(uint64(l))
		}
	}
	return n
}

func (m *GasRevenueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovGoat(uint64(l))
	return n
}

func (m *AddVoterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	l = len(m.PubkeyHash)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	return n
}

func (m *RemoveVoterReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	return n
}

func (m *WithdrawalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGoat(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovGoat(uint64(m.Amount))
	}
	if m.MaxTxPrice != 0 {
		n += 1 + sovGoat(uint64(m.MaxTxPrice))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGoat(uint64(l))
	}
	return n
}

func (m *ReplaceByFeeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGoat(uint64(m.Id))
	}
	if m.MaxTxPrice != 0 {
		n += 1 + sovGoat(uint64(m.MaxTxPrice))
	}
	return n
}

func (m *Cancel1Req) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGoat(uint64(m.Id))
	}
	return n
}

func sovGoat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGoat(x uint64) (n int) {
	return sovGoat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecutionPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeRecipient = append(m.FeeRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.FeeRecipient == nil {
				m.FeeRecipient = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiptsRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiptsRoot = append(m.ReceiptsRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiptsRoot == nil {
				m.ReceiptsRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogsBloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogsBloom = append(m.LogsBloom[:0], dAtA[iNdEx:postIndex]...)
			if m.LogsBloom == nil {
				m.LogsBloom = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevRandao", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevRandao = append(m.PrevRandao[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevRandao == nil {
				m.PrevRandao = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraData = append(m.ExtraData[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraData == nil {
				m.ExtraData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFeePerGas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseFeePerGas = append(m.BaseFeePerGas[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseFeePerGas == nil {
				m.BaseFeePerGas = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, make([]byte, postIndex-iNdEx))
			copy(m.Transactions[len(m.Transactions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeaconRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeaconRoot = append(m.BeaconRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.BeaconRoot == nil {
				m.BeaconRoot = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlobGasUsed", wireType)
			}
			m.BlobGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlobGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcessBlobGas", wireType)
			}
			m.ExcessBlobGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExcessBlobGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasRevenue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasRevenue == nil {
				m.GasRevenue = &GasRevenueReq{}
			}
			if err := m.GasRevenue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddVoterReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddVoterReq = append(m.AddVoterReq, &AddVoterReq{})
			if err := m.AddVoterReq[len(m.AddVoterReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RmVoterReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RmVoterReq = append(m.RmVoterReq, &RemoveVoterReq{})
			if err := m.RmVoterReq[len(m.RmVoterReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalReq = append(m.WithdrawalReq, &WithdrawalReq{})
			if err := m.WithdrawalReq[len(m.WithdrawalReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RbfReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RbfReq = append(m.RbfReq, &ReplaceByFeeReq{})
			if err := m.RbfReq[len(m.RbfReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel1Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cancel1Req = append(m.Cancel1Req, &Cancel1Req{})
			if err := m.Cancel1Req[len(m.Cancel1Req)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, make([]byte, postIndex-iNdEx))
			copy(m.Requests[len(m.Requests)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasRevenueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasRevenueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasRevenueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddVoterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddVoterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddVoterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubkeyHash = append(m.PubkeyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PubkeyHash == nil {
				m.PubkeyHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveVoterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveVoterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveVoterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxPrice", wireType)
			}
			m.MaxTxPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGoat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGoat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplaceByFeeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplaceByFeeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplaceByFeeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxPrice", wireType)
			}
			m.MaxTxPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cancel1Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cancel1Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cancel1Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGoat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGoat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGoat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGoat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGoat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGoat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGoat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGoat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGoat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGoat = fmt.Errorf("proto: unexpected end of group")
)
