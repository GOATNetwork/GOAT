// Code generated by MockGen. DO NOT EDIT.
// Source: expected_keepers.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	address "cosmossdk.io/core/address"
	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/ethereum/go-ethereum/core/types"
	goattypes "github.com/ethereum/go-ethereum/core/types/goattypes"
	gomock "github.com/golang/mock/gomock"
)

// MockBitcoinKeeper is a mock of BitcoinKeeper interface.
type MockBitcoinKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBitcoinKeeperMockRecorder
}

// MockBitcoinKeeperMockRecorder is the mock recorder for MockBitcoinKeeper.
type MockBitcoinKeeperMockRecorder struct {
	mock *MockBitcoinKeeper
}

// NewMockBitcoinKeeper creates a new mock instance.
func NewMockBitcoinKeeper(ctrl *gomock.Controller) *MockBitcoinKeeper {
	mock := &MockBitcoinKeeper{ctrl: ctrl}
	mock.recorder = &MockBitcoinKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitcoinKeeper) EXPECT() *MockBitcoinKeeperMockRecorder {
	return m.recorder
}

// DequeueBitcoinModuleTx mocks base method.
func (m *MockBitcoinKeeper) DequeueBitcoinModuleTx(ctx context.Context) ([]*types0.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueBitcoinModuleTx", ctx)
	ret0, _ := ret[0].([]*types0.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueBitcoinModuleTx indicates an expected call of DequeueBitcoinModuleTx.
func (mr *MockBitcoinKeeperMockRecorder) DequeueBitcoinModuleTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueBitcoinModuleTx", reflect.TypeOf((*MockBitcoinKeeper)(nil).DequeueBitcoinModuleTx), ctx)
}

// ProcessBridgeRequest mocks base method.
func (m *MockBitcoinKeeper) ProcessBridgeRequest(ctx context.Context, req goattypes.BridgeRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBridgeRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBridgeRequest indicates an expected call of ProcessBridgeRequest.
func (mr *MockBitcoinKeeperMockRecorder) ProcessBridgeRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBridgeRequest", reflect.TypeOf((*MockBitcoinKeeper)(nil).ProcessBridgeRequest), ctx, req)
}

// MockLockingKeeper is a mock of LockingKeeper interface.
type MockLockingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLockingKeeperMockRecorder
}

// MockLockingKeeperMockRecorder is the mock recorder for MockLockingKeeper.
type MockLockingKeeperMockRecorder struct {
	mock *MockLockingKeeper
}

// NewMockLockingKeeper creates a new mock instance.
func NewMockLockingKeeper(ctrl *gomock.Controller) *MockLockingKeeper {
	mock := &MockLockingKeeper{ctrl: ctrl}
	mock.recorder = &MockLockingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingKeeper) EXPECT() *MockLockingKeeperMockRecorder {
	return m.recorder
}

// DequeueLockingModuleTx mocks base method.
func (m *MockLockingKeeper) DequeueLockingModuleTx(ctx context.Context) ([]*types0.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueLockingModuleTx", ctx)
	ret0, _ := ret[0].([]*types0.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueLockingModuleTx indicates an expected call of DequeueLockingModuleTx.
func (mr *MockLockingKeeperMockRecorder) DequeueLockingModuleTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueLockingModuleTx", reflect.TypeOf((*MockLockingKeeper)(nil).DequeueLockingModuleTx), ctx)
}

// ProcessLockingRequest mocks base method.
func (m *MockLockingKeeper) ProcessLockingRequest(ctx context.Context, req goattypes.LockingRequests, hasTx bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLockingRequest", ctx, req, hasTx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLockingRequest indicates an expected call of ProcessLockingRequest.
func (mr *MockLockingKeeperMockRecorder) ProcessLockingRequest(ctx, req, hasTx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLockingRequest", reflect.TypeOf((*MockLockingKeeper)(nil).ProcessLockingRequest), ctx, req, hasTx)
}

// MockRelayerKeeper is a mock of RelayerKeeper interface.
type MockRelayerKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRelayerKeeperMockRecorder
}

// MockRelayerKeeperMockRecorder is the mock recorder for MockRelayerKeeper.
type MockRelayerKeeperMockRecorder struct {
	mock *MockRelayerKeeper
}

// NewMockRelayerKeeper creates a new mock instance.
func NewMockRelayerKeeper(ctrl *gomock.Controller) *MockRelayerKeeper {
	mock := &MockRelayerKeeper{ctrl: ctrl}
	mock.recorder = &MockRelayerKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayerKeeper) EXPECT() *MockRelayerKeeperMockRecorder {
	return m.recorder
}

// GetCurrentProposer mocks base method.
func (m *MockRelayerKeeper) GetCurrentProposer(ctx context.Context) (types.AccAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentProposer", ctx)
	ret0, _ := ret[0].(types.AccAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentProposer indicates an expected call of GetCurrentProposer.
func (mr *MockRelayerKeeperMockRecorder) GetCurrentProposer(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentProposer", reflect.TypeOf((*MockRelayerKeeper)(nil).GetCurrentProposer), ctx)
}

// ProcessRelayerRequest mocks base method.
func (m *MockRelayerKeeper) ProcessRelayerRequest(ctx context.Context, req goattypes.RelayerRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRelayerRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRelayerRequest indicates an expected call of ProcessRelayerRequest.
func (mr *MockRelayerKeeperMockRecorder) ProcessRelayerRequest(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRelayerRequest", reflect.TypeOf((*MockRelayerKeeper)(nil).ProcessRelayerRequest), ctx, req)
}

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// AddressCodec mocks base method.
func (m *MockAccountKeeper) AddressCodec() address.Codec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddressCodec")
	ret0, _ := ret[0].(address.Codec)
	return ret0
}

// AddressCodec indicates an expected call of AddressCodec.
func (mr *MockAccountKeeperMockRecorder) AddressCodec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddressCodec", reflect.TypeOf((*MockAccountKeeper)(nil).AddressCodec))
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(arg0 context.Context, arg1 types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), arg0, arg1)
}

// GetSequence mocks base method.
func (m *MockAccountKeeper) GetSequence(arg0 context.Context, arg1 types.AccAddress) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequence", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequence indicates an expected call of GetSequence.
func (mr *MockAccountKeeperMockRecorder) GetSequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequence", reflect.TypeOf((*MockAccountKeeper)(nil).GetSequence), arg0, arg1)
}

// HasAccount mocks base method.
func (m *MockAccountKeeper) HasAccount(arg0 context.Context, arg1 types.AccAddress) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAccount", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAccount indicates an expected call of HasAccount.
func (mr *MockAccountKeeperMockRecorder) HasAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAccount", reflect.TypeOf((*MockAccountKeeper)(nil).HasAccount), arg0, arg1)
}

// NewAccount mocks base method.
func (m *MockAccountKeeper) NewAccount(arg0 context.Context, arg1 types.AccountI) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccount", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// NewAccount indicates an expected call of NewAccount.
func (mr *MockAccountKeeperMockRecorder) NewAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccount", reflect.TypeOf((*MockAccountKeeper)(nil).NewAccount), arg0, arg1)
}

// NewAccountWithAddress mocks base method.
func (m *MockAccountKeeper) NewAccountWithAddress(arg0 context.Context, arg1 types.AccAddress) types.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccountWithAddress", arg0, arg1)
	ret0, _ := ret[0].(types.AccountI)
	return ret0
}

// NewAccountWithAddress indicates an expected call of NewAccountWithAddress.
func (mr *MockAccountKeeperMockRecorder) NewAccountWithAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccountWithAddress", reflect.TypeOf((*MockAccountKeeper)(nil).NewAccountWithAddress), arg0, arg1)
}

// NextAccountNumber mocks base method.
func (m *MockAccountKeeper) NextAccountNumber(arg0 context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextAccountNumber", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// NextAccountNumber indicates an expected call of NextAccountNumber.
func (mr *MockAccountKeeperMockRecorder) NextAccountNumber(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextAccountNumber", reflect.TypeOf((*MockAccountKeeper)(nil).NextAccountNumber), arg0)
}

// SetAccount mocks base method.
func (m *MockAccountKeeper) SetAccount(arg0 context.Context, arg1 types.AccountI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAccount", arg0, arg1)
}

// SetAccount indicates an expected call of SetAccount.
func (mr *MockAccountKeeperMockRecorder) SetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).SetAccount), arg0, arg1)
}
