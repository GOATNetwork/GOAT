// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/bitcoin/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/goatnetwork/goat/x/relayer/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgNewBlockHashes represents a solid block header is confirmed by relayer group
type MsgNewBlockHashes struct {
	Proposer         string       `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote             *types.Votes `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	StartBlockNumber uint64       `protobuf:"varint,3,opt,name=start_block_number,json=startBlockNumber,proto3" json:"start_block_number,omitempty"`
	BlockHash        [][]byte     `protobuf:"bytes,4,rep,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *MsgNewBlockHashes) Reset()         { *m = MsgNewBlockHashes{} }
func (m *MsgNewBlockHashes) String() string { return proto.CompactTextString(m) }
func (*MsgNewBlockHashes) ProtoMessage()    {}
func (*MsgNewBlockHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{0}
}
func (m *MsgNewBlockHashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBlockHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBlockHashes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBlockHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBlockHashes.Merge(m, src)
}
func (m *MsgNewBlockHashes) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBlockHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBlockHashes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBlockHashes proto.InternalMessageInfo

func (m *MsgNewBlockHashes) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewBlockHashes) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgNewBlockHashes) GetStartBlockNumber() uint64 {
	if m != nil {
		return m.StartBlockNumber
	}
	return 0
}

func (m *MsgNewBlockHashes) GetBlockHash() [][]byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

// MsgNewBlockHashesResponse defines the Msg/NewHeaders response type.
type MsgNewBlockHashesResponse struct {
}

func (m *MsgNewBlockHashesResponse) Reset()         { *m = MsgNewBlockHashesResponse{} }
func (m *MsgNewBlockHashesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewBlockHashesResponse) ProtoMessage()    {}
func (*MsgNewBlockHashesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{1}
}
func (m *MsgNewBlockHashesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBlockHashesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBlockHashesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBlockHashesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBlockHashesResponse.Merge(m, src)
}
func (m *MsgNewBlockHashesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBlockHashesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBlockHashesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBlockHashesResponse proto.InternalMessageInfo

// MsgNewDeposits represents new deposits
type MsgNewDeposits struct {
	Proposer string     `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Deposits []*Deposit `protobuf:"bytes,2,rep,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *MsgNewDeposits) Reset()         { *m = MsgNewDeposits{} }
func (m *MsgNewDeposits) String() string { return proto.CompactTextString(m) }
func (*MsgNewDeposits) ProtoMessage()    {}
func (*MsgNewDeposits) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{2}
}
func (m *MsgNewDeposits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewDeposits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewDeposits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewDeposits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewDeposits.Merge(m, src)
}
func (m *MsgNewDeposits) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewDeposits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewDeposits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewDeposits proto.InternalMessageInfo

func (m *MsgNewDeposits) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewDeposits) GetDeposits() []*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// MsgNewDepositsResponse defines the Msg/NewDeposits response type.
type MsgNewDepositsResponse struct {
}

func (m *MsgNewDepositsResponse) Reset()         { *m = MsgNewDepositsResponse{} }
func (m *MsgNewDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewDepositsResponse) ProtoMessage()    {}
func (*MsgNewDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{3}
}
func (m *MsgNewDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewDepositsResponse.Merge(m, src)
}
func (m *MsgNewDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewDepositsResponse proto.InternalMessageInfo

// MsgNewPubkey is the Msg/NewPubkey request type.
type MsgNewPubkey struct {
	Proposer string           `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Vote     *types.Votes     `protobuf:"bytes,2,opt,name=vote,proto3" json:"vote,omitempty"`
	Pubkey   *types.PublicKey `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgNewPubkey) Reset()         { *m = MsgNewPubkey{} }
func (m *MsgNewPubkey) String() string { return proto.CompactTextString(m) }
func (*MsgNewPubkey) ProtoMessage()    {}
func (*MsgNewPubkey) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{4}
}
func (m *MsgNewPubkey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewPubkey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewPubkey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewPubkey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewPubkey.Merge(m, src)
}
func (m *MsgNewPubkey) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewPubkey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewPubkey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewPubkey proto.InternalMessageInfo

func (m *MsgNewPubkey) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewPubkey) GetVote() *types.Votes {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *MsgNewPubkey) GetPubkey() *types.PublicKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

// MsgNewPubkeyResponse is the Msg/NewPubkey response type.
type MsgNewPubkeyResponse struct {
}

func (m *MsgNewPubkeyResponse) Reset()         { *m = MsgNewPubkeyResponse{} }
func (m *MsgNewPubkeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewPubkeyResponse) ProtoMessage()    {}
func (*MsgNewPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_061207c379e1a1b2, []int{5}
}
func (m *MsgNewPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewPubkeyResponse.Merge(m, src)
}
func (m *MsgNewPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewPubkeyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewBlockHashes)(nil), "goat.bitcoin.v1.MsgNewBlockHashes")
	proto.RegisterType((*MsgNewBlockHashesResponse)(nil), "goat.bitcoin.v1.MsgNewBlockHashesResponse")
	proto.RegisterType((*MsgNewDeposits)(nil), "goat.bitcoin.v1.MsgNewDeposits")
	proto.RegisterType((*MsgNewDepositsResponse)(nil), "goat.bitcoin.v1.MsgNewDepositsResponse")
	proto.RegisterType((*MsgNewPubkey)(nil), "goat.bitcoin.v1.MsgNewPubkey")
	proto.RegisterType((*MsgNewPubkeyResponse)(nil), "goat.bitcoin.v1.MsgNewPubkeyResponse")
}

func init() { proto.RegisterFile("goat/bitcoin/v1/tx.proto", fileDescriptor_061207c379e1a1b2) }

var fileDescriptor_061207c379e1a1b2 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x77, 0xda, 0xba, 0x6c, 0xa7, 0xcb, 0xea, 0x86, 0xa5, 0x66, 0xb3, 0x34, 0x86, 0x80,
	0x18, 0xa2, 0x9b, 0xd0, 0xb8, 0xa7, 0xde, 0x2c, 0x0a, 0x82, 0xec, 0xb2, 0x46, 0x50, 0xf0, 0x52,
	0x93, 0x74, 0x48, 0x43, 0x9b, 0x4c, 0x98, 0x99, 0x76, 0xb7, 0x37, 0xf1, 0xe8, 0xc9, 0xb3, 0xdf,
	0x41, 0xe8, 0xc1, 0x0f, 0xe1, 0x71, 0xd1, 0x8b, 0x47, 0x69, 0x0f, 0xfd, 0x06, 0x9e, 0x25, 0x93,
	0x3f, 0xd6, 0x66, 0xd7, 0x05, 0x0f, 0x5e, 0x4a, 0x67, 0x7e, 0xcf, 0xbc, 0xcf, 0xfb, 0xcc, 0x3b,
	0x04, 0x8a, 0x3e, 0x76, 0x98, 0xe9, 0x06, 0xcc, 0xc3, 0x41, 0x64, 0x4e, 0xda, 0x26, 0x3b, 0x37,
	0x62, 0x82, 0x19, 0x16, 0x6e, 0x26, 0xc4, 0xc8, 0x88, 0x31, 0x69, 0x4b, 0xbb, 0x4e, 0x18, 0x44,
	0xd8, 0xe4, 0xbf, 0xa9, 0x46, 0xba, 0xed, 0x61, 0x1a, 0x62, 0x6a, 0x86, 0xd4, 0x4f, 0xce, 0x86,
	0xd4, 0xcf, 0xc0, 0x7e, 0x0a, 0x7a, 0x7c, 0x65, 0xa6, 0x8b, 0x0c, 0xb5, 0xd6, 0x1d, 0x73, 0x8b,
	0x55, 0x4c, 0xd0, 0xc8, 0x99, 0x22, 0x92, 0xe0, 0xec, 0x6f, 0x8a, 0xd5, 0x9f, 0x00, 0xee, 0x1e,
	0x53, 0xff, 0x04, 0x9d, 0x75, 0x47, 0xd8, 0x1b, 0x3e, 0x75, 0xe8, 0x00, 0x51, 0xe1, 0x08, 0x6e,
	0xc5, 0x04, 0xc7, 0x98, 0x22, 0x22, 0x02, 0x05, 0x68, 0xf5, 0xae, 0xf8, 0xf5, 0xf3, 0xe1, 0x5e,
	0xe6, 0xfb, 0xa8, 0xdf, 0x27, 0x88, 0xd2, 0x17, 0x8c, 0x04, 0x91, 0x6f, 0x17, 0x4a, 0x41, 0x87,
	0xb5, 0x09, 0x66, 0x48, 0xac, 0x28, 0x40, 0x6b, 0x58, 0x4d, 0x83, 0x07, 0xce, 0xed, 0x26, 0x6d,
	0xe3, 0x25, 0x66, 0x88, 0xda, 0x5c, 0x23, 0x3c, 0x80, 0x02, 0x65, 0x0e, 0x61, 0x3d, 0x37, 0xb1,
	0xed, 0x45, 0xe3, 0xd0, 0x45, 0x44, 0xac, 0x2a, 0x40, 0xab, 0xd9, 0xb7, 0x38, 0xe1, 0xfd, 0x9c,
	0xf0, 0x7d, 0xa1, 0x05, 0x61, 0xaa, 0x1b, 0x38, 0x74, 0x20, 0xd6, 0x94, 0xaa, 0xb6, 0x6d, 0xd7,
	0xdd, 0xbc, 0xe1, 0x8e, 0xf5, 0x6e, 0x39, 0xd3, 0x8b, 0x3e, 0xde, 0x2f, 0x67, 0xba, 0xc2, 0x53,
	0x9f, 0x17, 0xd7, 0x52, 0x8a, 0xa8, 0x1e, 0xc0, 0xfd, 0xd2, 0xa6, 0x8d, 0x68, 0x8c, 0x23, 0x8a,
	0xd4, 0x4f, 0x00, 0xee, 0xa4, 0xf4, 0x31, 0x8a, 0x31, 0x0d, 0xd8, 0xbf, 0x5e, 0xc9, 0x11, 0xdc,
	0xea, 0x67, 0x15, 0xc4, 0x8a, 0x52, 0xd5, 0x1a, 0x96, 0x68, 0xac, 0xbd, 0x03, 0x23, 0xb3, 0xb0,
	0x0b, 0x65, 0xc7, 0x2c, 0xe5, 0x69, 0x5d, 0x9a, 0x27, 0x6f, 0x4e, 0x15, 0x61, 0xf3, 0xcf, 0x9d,
	0x22, 0xc9, 0x37, 0x00, 0xb7, 0x53, 0x74, 0x3a, 0x76, 0x87, 0x68, 0xfa, 0x1f, 0x46, 0x6b, 0xc1,
	0xcd, 0x98, 0x7b, 0xf1, 0x71, 0x36, 0x2c, 0xa9, 0xa4, 0x3e, 0x1d, 0xbb, 0xa3, 0xc0, 0x7b, 0x86,
	0xa6, 0x76, 0xa6, 0xec, 0x1c, 0x96, 0x12, 0x1f, 0x5c, 0x9a, 0x38, 0x0d, 0xa1, 0x36, 0xe1, 0xde,
	0xea, 0x3a, 0x4f, 0x6b, 0x7d, 0xac, 0xc0, 0xea, 0x31, 0xf5, 0x85, 0x37, 0x70, 0x67, 0xed, 0x45,
	0xab, 0xa5, 0x6b, 0x2f, 0x4d, 0x5f, 0xd2, 0xaf, 0xd7, 0xe4, 0x4e, 0xc2, 0x2b, 0xd8, 0x58, 0x7d,
	0x1d, 0x77, 0xae, 0x38, 0x9a, 0x0b, 0xa4, 0x7b, 0xd7, 0x08, 0x8a, 0xc2, 0xcf, 0x61, 0xfd, 0xf7,
	0xb0, 0x5a, 0x57, 0x9c, 0x4a, 0xb1, 0x74, 0xf7, 0xaf, 0x38, 0x2f, 0x29, 0xdd, 0x78, 0xbb, 0x9c,
	0xe9, 0xa0, 0xfb, 0xe4, 0xcb, 0x5c, 0x06, 0x17, 0x73, 0x19, 0xfc, 0x98, 0xcb, 0xe0, 0xc3, 0x42,
	0xde, 0xb8, 0x58, 0xc8, 0x1b, 0xdf, 0x17, 0xf2, 0xc6, 0xeb, 0xfb, 0x7e, 0xc0, 0x06, 0x63, 0xd7,
	0xf0, 0x70, 0x68, 0x26, 0x15, 0x23, 0xc4, 0xce, 0x30, 0x19, 0x9a, 0x6b, 0x23, 0x60, 0xd3, 0x18,
	0x51, 0x77, 0x93, 0x7f, 0x38, 0x1e, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xb3, 0xd6, 0xf6,
	0xea, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// NewBlockHashs adds new bitcoin block hashes
	NewBlockHashes(ctx context.Context, in *MsgNewBlockHashes, opts ...grpc.CallOption) (*MsgNewBlockHashesResponse, error)
	// NewDeposit adds new deposits
	NewDeposits(ctx context.Context, in *MsgNewDeposits, opts ...grpc.CallOption) (*MsgNewDepositsResponse, error)
	// NewPubkey adds new deposit public key
	NewPubkey(ctx context.Context, in *MsgNewPubkey, opts ...grpc.CallOption) (*MsgNewPubkeyResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewBlockHashes(ctx context.Context, in *MsgNewBlockHashes, opts ...grpc.CallOption) (*MsgNewBlockHashesResponse, error) {
	out := new(MsgNewBlockHashesResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewBlockHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewDeposits(ctx context.Context, in *MsgNewDeposits, opts ...grpc.CallOption) (*MsgNewDepositsResponse, error) {
	out := new(MsgNewDepositsResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewPubkey(ctx context.Context, in *MsgNewPubkey, opts ...grpc.CallOption) (*MsgNewPubkeyResponse, error) {
	out := new(MsgNewPubkeyResponse)
	err := c.cc.Invoke(ctx, "/goat.bitcoin.v1.Msg/NewPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// NewBlockHashs adds new bitcoin block hashes
	NewBlockHashes(context.Context, *MsgNewBlockHashes) (*MsgNewBlockHashesResponse, error)
	// NewDeposit adds new deposits
	NewDeposits(context.Context, *MsgNewDeposits) (*MsgNewDepositsResponse, error)
	// NewPubkey adds new deposit public key
	NewPubkey(context.Context, *MsgNewPubkey) (*MsgNewPubkeyResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewBlockHashes(ctx context.Context, req *MsgNewBlockHashes) (*MsgNewBlockHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBlockHashes not implemented")
}
func (*UnimplementedMsgServer) NewDeposits(ctx context.Context, req *MsgNewDeposits) (*MsgNewDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDeposits not implemented")
}
func (*UnimplementedMsgServer) NewPubkey(ctx context.Context, req *MsgNewPubkey) (*MsgNewPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPubkey not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewBlockHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBlockHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBlockHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewBlockHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBlockHashes(ctx, req.(*MsgNewBlockHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewDeposits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewDeposits(ctx, req.(*MsgNewDeposits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewPubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.bitcoin.v1.Msg/NewPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewPubkey(ctx, req.(*MsgNewPubkey))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goat.bitcoin.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBlockHashes",
			Handler:    _Msg_NewBlockHashes_Handler,
		},
		{
			MethodName: "NewDeposits",
			Handler:    _Msg_NewDeposits_Handler,
		},
		{
			MethodName: "NewPubkey",
			Handler:    _Msg_NewPubkey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goat/bitcoin/v1/tx.proto",
}

func (m *MsgNewBlockHashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBlockHashes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBlockHashes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		for iNdEx := len(m.BlockHash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockHash[iNdEx])
			copy(dAtA[i:], m.BlockHash[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.StartBlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlockNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBlockHashesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBlockHashesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBlockHashesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewDeposits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewDeposits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewDeposits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewPubkey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewPubkey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewBlockHashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartBlockNumber != 0 {
		n += 1 + sovTx(uint64(m.StartBlockNumber))
	}
	if len(m.BlockHash) > 0 {
		for _, b := range m.BlockHash {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNewBlockHashesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewDeposits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgNewDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewPubkey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewBlockHashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBlockHashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBlockHashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockNumber", wireType)
			}
			m.StartBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash, make([]byte, postIndex-iNdEx))
			copy(m.BlockHash[len(m.BlockHash)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBlockHashesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBlockHashesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBlockHashesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewDeposits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewDeposits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewDeposits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, &Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Votes{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.PublicKey{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
