// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/relayer/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAddVoterRequest
type MsgNewVoterRequest struct {
	Proposer         string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	VoterBlsKey      []byte `protobuf:"bytes,2,opt,name=voter_bls_key,json=voterBlsKey,proto3" json:"voter_bls_key,omitempty"`
	VoterTxKey       []byte `protobuf:"bytes,3,opt,name=voter_tx_key,json=voterTxKey,proto3" json:"voter_tx_key,omitempty"`
	VoterTxKeyProof  []byte `protobuf:"bytes,4,opt,name=voter_tx_key_proof,json=voterTxKeyProof,proto3" json:"voter_tx_key_proof,omitempty"`
	VoterBlsKeyProof []byte `protobuf:"bytes,5,opt,name=voter_bls_key_proof,json=voterBlsKeyProof,proto3" json:"voter_bls_key_proof,omitempty"`
}

func (m *MsgNewVoterRequest) Reset()         { *m = MsgNewVoterRequest{} }
func (m *MsgNewVoterRequest) String() string { return proto.CompactTextString(m) }
func (*MsgNewVoterRequest) ProtoMessage()    {}
func (*MsgNewVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46f70bbe043ead5a, []int{0}
}
func (m *MsgNewVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewVoterRequest.Merge(m, src)
}
func (m *MsgNewVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewVoterRequest proto.InternalMessageInfo

func (m *MsgNewVoterRequest) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgNewVoterRequest) GetVoterBlsKey() []byte {
	if m != nil {
		return m.VoterBlsKey
	}
	return nil
}

func (m *MsgNewVoterRequest) GetVoterTxKey() []byte {
	if m != nil {
		return m.VoterTxKey
	}
	return nil
}

func (m *MsgNewVoterRequest) GetVoterTxKeyProof() []byte {
	if m != nil {
		return m.VoterTxKeyProof
	}
	return nil
}

func (m *MsgNewVoterRequest) GetVoterBlsKeyProof() []byte {
	if m != nil {
		return m.VoterBlsKeyProof
	}
	return nil
}

// MsgNewVoterResponse
type MsgNewVoterResponse struct {
}

func (m *MsgNewVoterResponse) Reset()         { *m = MsgNewVoterResponse{} }
func (m *MsgNewVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewVoterResponse) ProtoMessage()    {}
func (*MsgNewVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46f70bbe043ead5a, []int{1}
}
func (m *MsgNewVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewVoterResponse.Merge(m, src)
}
func (m *MsgNewVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewVoterResponse proto.InternalMessageInfo

// MsgPingRequest
type MsgAcceptProposerRequest struct {
	Proposer string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	// the current epoch number
	Epoch uint64 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *MsgAcceptProposerRequest) Reset()         { *m = MsgAcceptProposerRequest{} }
func (m *MsgAcceptProposerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptProposerRequest) ProtoMessage()    {}
func (*MsgAcceptProposerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_46f70bbe043ead5a, []int{2}
}
func (m *MsgAcceptProposerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptProposerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptProposerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptProposerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptProposerRequest.Merge(m, src)
}
func (m *MsgAcceptProposerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptProposerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptProposerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptProposerRequest proto.InternalMessageInfo

func (m *MsgAcceptProposerRequest) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgAcceptProposerRequest) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

// MsgAcceptProposerResponse
type MsgAcceptProposerResponse struct {
}

func (m *MsgAcceptProposerResponse) Reset()         { *m = MsgAcceptProposerResponse{} }
func (m *MsgAcceptProposerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptProposerResponse) ProtoMessage()    {}
func (*MsgAcceptProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_46f70bbe043ead5a, []int{3}
}
func (m *MsgAcceptProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptProposerResponse.Merge(m, src)
}
func (m *MsgAcceptProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptProposerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewVoterRequest)(nil), "goat.relayer.v1.MsgNewVoterRequest")
	proto.RegisterType((*MsgNewVoterResponse)(nil), "goat.relayer.v1.MsgNewVoterResponse")
	proto.RegisterType((*MsgAcceptProposerRequest)(nil), "goat.relayer.v1.MsgAcceptProposerRequest")
	proto.RegisterType((*MsgAcceptProposerResponse)(nil), "goat.relayer.v1.MsgAcceptProposerResponse")
}

func init() { proto.RegisterFile("goat/relayer/v1/tx.proto", fileDescriptor_46f70bbe043ead5a) }

var fileDescriptor_46f70bbe043ead5a = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0x6d, 0x83, 0xca, 0x51, 0x28, 0x5c, 0x8b, 0x70, 0x8d, 0x64, 0x05, 0xc3, 0x50,
	0x5c, 0xd5, 0xa7, 0x52, 0x26, 0xb6, 0x46, 0x62, 0x42, 0x41, 0x95, 0xf9, 0x31, 0xb0, 0x44, 0x89,
	0x7b, 0x5c, 0xa2, 0xc4, 0x3e, 0x73, 0xef, 0x92, 0xd8, 0x1b, 0x62, 0x64, 0x62, 0x67, 0xe2, 0x3f,
	0xc8, 0xc0, 0x1f, 0xc1, 0xc0, 0x10, 0x31, 0x31, 0xa2, 0x64, 0xc8, 0xbf, 0x81, 0x7c, 0x67, 0x42,
	0x7e, 0x09, 0x21, 0x58, 0x2c, 0xbd, 0xf7, 0x3e, 0xef, 0xfb, 0xbe, 0xfa, 0xca, 0x87, 0x2d, 0x2e,
	0x1a, 0x8a, 0x4a, 0xd6, 0x6d, 0x64, 0x4c, 0xd2, 0xfe, 0x09, 0x55, 0xa9, 0x9f, 0x48, 0xa1, 0x04,
	0xd9, 0xcd, 0x27, 0x7e, 0x31, 0xf1, 0xfb, 0x27, 0xf6, 0x8d, 0x46, 0xd4, 0x8e, 0x05, 0xd5, 0x5f,
	0xc3, 0xd8, 0xb7, 0x42, 0x01, 0x91, 0x00, 0x1a, 0x01, 0xcf, 0x77, 0x23, 0xe0, 0xc5, 0xe0, 0xc0,
	0x0c, 0xea, 0xba, 0xa2, 0xa6, 0x30, 0x23, 0xf7, 0xd3, 0x06, 0x26, 0x35, 0xe0, 0x4f, 0xd9, 0xe0,
	0xa5, 0x50, 0x4c, 0x06, 0xec, 0x4d, 0x8f, 0x81, 0x22, 0x0f, 0xf1, 0x76, 0x22, 0x45, 0x22, 0x80,
	0x49, 0x0b, 0x55, 0xd0, 0xe1, 0xe5, 0xaa, 0xf5, 0xed, 0xf3, 0xf1, 0x7e, 0xb1, 0x7a, 0x76, 0x71,
	0x21, 0x19, 0xc0, 0x33, 0x25, 0xdb, 0x31, 0x0f, 0x66, 0x24, 0x71, 0xf1, 0xd5, 0x7e, 0xae, 0x52,
	0x6f, 0x76, 0xa1, 0xde, 0x61, 0x99, 0xb5, 0x51, 0x41, 0x87, 0x3b, 0xc1, 0x15, 0xdd, 0xac, 0x76,
	0xe1, 0x09, 0xcb, 0x48, 0x05, 0xef, 0x18, 0x46, 0xa5, 0x1a, 0xd9, 0xd4, 0x08, 0xd6, 0xbd, 0xe7,
	0x69, 0x4e, 0x1c, 0x61, 0x32, 0x4f, 0xe4, 0xae, 0xc5, 0x6b, 0x6b, 0x4b, 0x73, 0xbb, 0xbf, 0xb9,
	0xf3, 0xbc, 0x4d, 0x8e, 0xf1, 0xde, 0xc2, 0xc9, 0x82, 0x2e, 0x6b, 0xfa, 0xfa, 0xdc, 0x61, 0x8d,
	0x3f, 0x3a, 0x7d, 0x37, 0x1d, 0x7a, 0x33, 0xc3, 0xef, 0xa7, 0x43, 0xef, 0x8e, 0x8e, 0x3c, 0x9d,
	0x85, 0xbe, 0x1a, 0x86, 0x7b, 0x13, 0xef, 0x2d, 0x74, 0x21, 0x11, 0x31, 0x30, 0xf7, 0x23, 0xc2,
	0x56, 0x0d, 0xf8, 0x59, 0x18, 0xb2, 0x44, 0x9d, 0x17, 0x92, 0xff, 0x17, 0xe0, 0x3e, 0x2e, 0xb3,
	0x44, 0x84, 0x2d, 0x1d, 0xdc, 0x56, 0x60, 0x8a, 0x7f, 0x33, 0x7d, 0x1b, 0x1f, 0xac, 0x31, 0x67,
	0xac, 0x3f, 0xf8, 0x8a, 0xf0, 0x66, 0x0d, 0x38, 0x79, 0x81, 0xb7, 0x7f, 0xed, 0x91, 0xbb, 0xfe,
	0xd2, 0x2f, 0xe6, 0xaf, 0xaa, 0xda, 0xf7, 0xfe, 0x0c, 0x19, 0x79, 0xc2, 0xf1, 0xb5, 0xc5, 0xc3,
	0xe4, 0xfe, 0xba, 0xbd, 0xb5, 0xc9, 0xd9, 0xde, 0xdf, 0xa0, 0xe6, 0x90, 0x5d, 0x7e, 0x3b, 0x1d,
	0x7a, 0xa8, 0xfa, 0xf8, 0xcb, 0xd8, 0x41, 0xa3, 0xb1, 0x83, 0x7e, 0x8c, 0x1d, 0xf4, 0x61, 0xe2,
	0x94, 0x46, 0x13, 0xa7, 0xf4, 0x7d, 0xe2, 0x94, 0x5e, 0x1d, 0xf1, 0xb6, 0x6a, 0xf5, 0x9a, 0x7e,
	0x28, 0x22, 0x9a, 0xcb, 0xc6, 0x4c, 0x0d, 0x84, 0xec, 0xd0, 0xa5, 0xfc, 0x54, 0x96, 0x30, 0x68,
	0x5e, 0xd2, 0x4f, 0xe2, 0xf4, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x41, 0x26, 0x8a, 0x86,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// NewVoter adds a pending voter with the online proof
	// an address is approved to engage as a relayer voter
	// the voter must send online proof to current proposer
	// then proposer initiates NewVoter tx to add the voter to the active list
	NewVoter(ctx context.Context, in *MsgNewVoterRequest, opts ...grpc.CallOption) (*MsgNewVoterResponse, error)
	// AcceptProposer accepts the proposer role
	// if a voter is elected as a proposer
	// the voter must initiate AcceptProposer tx to prove online status
	// the consensus layer can wait for Param.AcceptProposerTimeout at most
	// Note: if the timeout is zero, the consensus layer won't use it
	AcceptProposer(ctx context.Context, in *MsgAcceptProposerRequest, opts ...grpc.CallOption) (*MsgAcceptProposerResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewVoter(ctx context.Context, in *MsgNewVoterRequest, opts ...grpc.CallOption) (*MsgNewVoterResponse, error) {
	out := new(MsgNewVoterResponse)
	err := c.cc.Invoke(ctx, "/goat.relayer.v1.Msg/NewVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptProposer(ctx context.Context, in *MsgAcceptProposerRequest, opts ...grpc.CallOption) (*MsgAcceptProposerResponse, error) {
	out := new(MsgAcceptProposerResponse)
	err := c.cc.Invoke(ctx, "/goat.relayer.v1.Msg/AcceptProposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// NewVoter adds a pending voter with the online proof
	// an address is approved to engage as a relayer voter
	// the voter must send online proof to current proposer
	// then proposer initiates NewVoter tx to add the voter to the active list
	NewVoter(context.Context, *MsgNewVoterRequest) (*MsgNewVoterResponse, error)
	// AcceptProposer accepts the proposer role
	// if a voter is elected as a proposer
	// the voter must initiate AcceptProposer tx to prove online status
	// the consensus layer can wait for Param.AcceptProposerTimeout at most
	// Note: if the timeout is zero, the consensus layer won't use it
	AcceptProposer(context.Context, *MsgAcceptProposerRequest) (*MsgAcceptProposerResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewVoter(ctx context.Context, req *MsgNewVoterRequest) (*MsgNewVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewVoter not implemented")
}
func (*UnimplementedMsgServer) AcceptProposer(ctx context.Context, req *MsgAcceptProposerRequest) (*MsgAcceptProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposer not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.relayer.v1.Msg/NewVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewVoter(ctx, req.(*MsgNewVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goat.relayer.v1.Msg/AcceptProposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptProposer(ctx, req.(*MsgAcceptProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goat.relayer.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewVoter",
			Handler:    _Msg_NewVoter_Handler,
		},
		{
			MethodName: "AcceptProposer",
			Handler:    _Msg_AcceptProposer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goat/relayer/v1/tx.proto",
}

func (m *MsgNewVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VoterBlsKeyProof) > 0 {
		i -= len(m.VoterBlsKeyProof)
		copy(dAtA[i:], m.VoterBlsKeyProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterBlsKeyProof)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VoterTxKeyProof) > 0 {
		i -= len(m.VoterTxKeyProof)
		copy(dAtA[i:], m.VoterTxKeyProof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterTxKeyProof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VoterTxKey) > 0 {
		i -= len(m.VoterTxKey)
		copy(dAtA[i:], m.VoterTxKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterTxKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VoterBlsKey) > 0 {
		i -= len(m.VoterBlsKey)
		copy(dAtA[i:], m.VoterBlsKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoterBlsKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptProposerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptProposerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptProposerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Epoch != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterBlsKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterTxKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterTxKeyProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VoterBlsKeyProof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptProposerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovTx(uint64(m.Epoch))
	}
	return n
}

func (m *MsgAcceptProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterBlsKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterBlsKey = append(m.VoterBlsKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterBlsKey == nil {
				m.VoterBlsKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterTxKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterTxKey = append(m.VoterTxKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterTxKey == nil {
				m.VoterTxKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterTxKeyProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterTxKeyProof = append(m.VoterTxKeyProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterTxKeyProof == nil {
				m.VoterTxKeyProof = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterBlsKeyProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoterBlsKeyProof = append(m.VoterBlsKeyProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VoterBlsKeyProof == nil {
				m.VoterBlsKeyProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptProposerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptProposerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptProposerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
