// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	types "github.com/goatnetwork/goat/x/relayer/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIVoteMsg is a mock of IVoteMsg interface.
type MockIVoteMsg struct {
	ctrl     *gomock.Controller
	recorder *MockIVoteMsgMockRecorder
}

// MockIVoteMsgMockRecorder is the mock recorder for MockIVoteMsg.
type MockIVoteMsgMockRecorder struct {
	mock *MockIVoteMsg
}

// NewMockIVoteMsg creates a new mock instance.
func NewMockIVoteMsg(ctrl *gomock.Controller) *MockIVoteMsg {
	mock := &MockIVoteMsg{ctrl: ctrl}
	mock.recorder = &MockIVoteMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVoteMsg) EXPECT() *MockIVoteMsgMockRecorder {
	return m.recorder
}

// GetProposer mocks base method.
func (m *MockIVoteMsg) GetProposer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProposer indicates an expected call of GetProposer.
func (mr *MockIVoteMsgMockRecorder) GetProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockIVoteMsg)(nil).GetProposer))
}

// GetVote mocks base method.
func (m *MockIVoteMsg) GetVote() *types.Votes {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVote")
	ret0, _ := ret[0].(*types.Votes)
	return ret0
}

// GetVote indicates an expected call of GetVote.
func (mr *MockIVoteMsgMockRecorder) GetVote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVote", reflect.TypeOf((*MockIVoteMsg)(nil).GetVote))
}

// MethodName mocks base method.
func (m *MockIVoteMsg) MethodName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodName")
	ret0, _ := ret[0].(string)
	return ret0
}

// MethodName indicates an expected call of MethodName.
func (mr *MockIVoteMsgMockRecorder) MethodName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodName", reflect.TypeOf((*MockIVoteMsg)(nil).MethodName))
}

// VoteSigDoc mocks base method.
func (m *MockIVoteMsg) VoteSigDoc() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VoteSigDoc")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// VoteSigDoc indicates an expected call of VoteSigDoc.
func (mr *MockIVoteMsgMockRecorder) VoteSigDoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VoteSigDoc", reflect.TypeOf((*MockIVoteMsg)(nil).VoteSigDoc))
}

// MockINonVoteMsg is a mock of INonVoteMsg interface.
type MockINonVoteMsg struct {
	ctrl     *gomock.Controller
	recorder *MockINonVoteMsgMockRecorder
}

// MockINonVoteMsgMockRecorder is the mock recorder for MockINonVoteMsg.
type MockINonVoteMsgMockRecorder struct {
	mock *MockINonVoteMsg
}

// NewMockINonVoteMsg creates a new mock instance.
func NewMockINonVoteMsg(ctrl *gomock.Controller) *MockINonVoteMsg {
	mock := &MockINonVoteMsg{ctrl: ctrl}
	mock.recorder = &MockINonVoteMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINonVoteMsg) EXPECT() *MockINonVoteMsgMockRecorder {
	return m.recorder
}

// GetProposer mocks base method.
func (m *MockINonVoteMsg) GetProposer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProposer indicates an expected call of GetProposer.
func (mr *MockINonVoteMsgMockRecorder) GetProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockINonVoteMsg)(nil).GetProposer))
}

// MockIRelayer is a mock of IRelayer interface.
type MockIRelayer struct {
	ctrl     *gomock.Controller
	recorder *MockIRelayerMockRecorder
}

// MockIRelayerMockRecorder is the mock recorder for MockIRelayer.
type MockIRelayerMockRecorder struct {
	mock *MockIRelayer
}

// NewMockIRelayer creates a new mock instance.
func NewMockIRelayer(ctrl *gomock.Controller) *MockIRelayer {
	mock := &MockIRelayer{ctrl: ctrl}
	mock.recorder = &MockIRelayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelayer) EXPECT() *MockIRelayerMockRecorder {
	return m.recorder
}

// GetEpoch mocks base method.
func (m *MockIRelayer) GetEpoch() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEpoch")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetEpoch indicates an expected call of GetEpoch.
func (mr *MockIRelayerMockRecorder) GetEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEpoch", reflect.TypeOf((*MockIRelayer)(nil).GetEpoch))
}

// GetLastElected mocks base method.
func (m *MockIRelayer) GetLastElected() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastElected")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetLastElected indicates an expected call of GetLastElected.
func (mr *MockIRelayerMockRecorder) GetLastElected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastElected", reflect.TypeOf((*MockIRelayer)(nil).GetLastElected))
}

// GetProposer mocks base method.
func (m *MockIRelayer) GetProposer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProposer indicates an expected call of GetProposer.
func (mr *MockIRelayerMockRecorder) GetProposer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposer", reflect.TypeOf((*MockIRelayer)(nil).GetProposer))
}

// GetVoters mocks base method.
func (m *MockIRelayer) GetVoters() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoters")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetVoters indicates an expected call of GetVoters.
func (mr *MockIRelayerMockRecorder) GetVoters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoters", reflect.TypeOf((*MockIRelayer)(nil).GetVoters))
}
