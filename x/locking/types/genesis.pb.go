// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/locking/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UnlockQueueGenesis
type UnlockQueueGenesis struct {
	Timestamp time.Time `protobuf:"bytes,1,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	Unlocks   []*Unlock `protobuf:"bytes,2,rep,name=unlocks,proto3" json:"unlocks,omitempty"`
}

func (m *UnlockQueueGenesis) Reset()         { *m = UnlockQueueGenesis{} }
func (m *UnlockQueueGenesis) String() string { return proto.CompactTextString(m) }
func (*UnlockQueueGenesis) ProtoMessage()    {}
func (*UnlockQueueGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c19c2fc5b54493b, []int{0}
}
func (m *UnlockQueueGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnlockQueueGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnlockQueueGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnlockQueueGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockQueueGenesis.Merge(m, src)
}
func (m *UnlockQueueGenesis) XXX_Size() int {
	return m.Size()
}
func (m *UnlockQueueGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockQueueGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockQueueGenesis proto.InternalMessageInfo

func (m *UnlockQueueGenesis) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *UnlockQueueGenesis) GetUnlocks() []*Unlock {
	if m != nil {
		return m.Unlocks
	}
	return nil
}

// TokenGenesis
type TokenGenesis struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Token Token  `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
}

func (m *TokenGenesis) Reset()         { *m = TokenGenesis{} }
func (m *TokenGenesis) String() string { return proto.CompactTextString(m) }
func (*TokenGenesis) ProtoMessage()    {}
func (*TokenGenesis) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c19c2fc5b54493b, []int{1}
}
func (m *TokenGenesis) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenGenesis) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenGenesis.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenGenesis) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenGenesis.Merge(m, src)
}
func (m *TokenGenesis) XXX_Size() int {
	return m.Size()
}
func (m *TokenGenesis) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenGenesis.DiscardUnknown(m)
}

var xxx_messageInfo_TokenGenesis proto.InternalMessageInfo

func (m *TokenGenesis) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *TokenGenesis) GetToken() Token {
	if m != nil {
		return m.Token
	}
	return Token{}
}

// GenesisState defines the locking module's genesis state.
type GenesisState struct {
	// params defines all the parameters of the module.
	Params      Params                                   `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	Validators  []Validator                              `protobuf:"bytes,2,rep,name=validators,proto3" json:"validators"`
	Tokens      []*TokenGenesis                          `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Slashed     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=slashed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"slashed"`
	EthTxNonce  uint64                                   `protobuf:"varint,5,opt,name=eth_tx_nonce,json=ethTxNonce,proto3" json:"eth_tx_nonce,omitempty"`
	EthTxQueue  EthTxQueue                               `protobuf:"bytes,6,opt,name=eth_tx_queue,json=ethTxQueue,proto3" json:"eth_tx_queue"`
	RewardPool  RewardPool                               `protobuf:"bytes,7,opt,name=reward_pool,json=rewardPool,proto3" json:"reward_pool"`
	UnlockQueue []*UnlockQueueGenesis                    `protobuf:"bytes,8,rep,name=unlock_queue,json=unlockQueue,proto3" json:"unlock_queue,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c19c2fc5b54493b, []int{2}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetValidators() []Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GenesisState) GetTokens() []*TokenGenesis {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *GenesisState) GetSlashed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Slashed
	}
	return nil
}

func (m *GenesisState) GetEthTxNonce() uint64 {
	if m != nil {
		return m.EthTxNonce
	}
	return 0
}

func (m *GenesisState) GetEthTxQueue() EthTxQueue {
	if m != nil {
		return m.EthTxQueue
	}
	return EthTxQueue{}
}

func (m *GenesisState) GetRewardPool() RewardPool {
	if m != nil {
		return m.RewardPool
	}
	return RewardPool{}
}

func (m *GenesisState) GetUnlockQueue() []*UnlockQueueGenesis {
	if m != nil {
		return m.UnlockQueue
	}
	return nil
}

func init() {
	proto.RegisterType((*UnlockQueueGenesis)(nil), "goat.locking.v1.UnlockQueueGenesis")
	proto.RegisterType((*TokenGenesis)(nil), "goat.locking.v1.TokenGenesis")
	proto.RegisterType((*GenesisState)(nil), "goat.locking.v1.GenesisState")
}

func init() { proto.RegisterFile("goat/locking/v1/genesis.proto", fileDescriptor_4c19c2fc5b54493b) }

var fileDescriptor_4c19c2fc5b54493b = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xfb, 0x93, 0x7e, 0x9d, 0xe4, 0x13, 0x62, 0x54, 0x81, 0x49, 0xa9, 0x13, 0x95, 0x4d,
	0x04, 0x62, 0x46, 0x29, 0xaa, 0x90, 0x58, 0x06, 0x95, 0xb0, 0x42, 0xc5, 0x04, 0x16, 0x48, 0x28,
	0x9a, 0x24, 0x83, 0x63, 0x62, 0xfb, 0x06, 0xcf, 0x38, 0x0d, 0x6f, 0x91, 0xc7, 0x40, 0xac, 0xe0,
	0x2d, 0xba, 0xec, 0x92, 0x15, 0x45, 0xc9, 0x82, 0xd7, 0x40, 0xf3, 0xe3, 0x34, 0x4d, 0xe8, 0x26,
	0x19, 0xdf, 0x73, 0xee, 0x99, 0x73, 0xaf, 0xce, 0xa0, 0x83, 0x00, 0x98, 0xa4, 0x11, 0xf4, 0x86,
	0x61, 0x12, 0xd0, 0x71, 0x83, 0x06, 0x3c, 0xe1, 0x22, 0x14, 0x64, 0x94, 0x82, 0x04, 0x7c, 0x4b,
	0xc1, 0xc4, 0xc2, 0x64, 0xdc, 0xa8, 0xdc, 0x66, 0x71, 0x98, 0x00, 0xd5, 0xbf, 0x86, 0x53, 0xf1,
	0x7a, 0x20, 0x62, 0x10, 0xb4, 0xcb, 0x04, 0xa7, 0xe3, 0x46, 0x97, 0x4b, 0xd6, 0xa0, 0x3d, 0x08,
	0x13, 0x8b, 0xaf, 0x5d, 0x91, 0xcb, 0x19, 0xf8, 0xfe, 0x2a, 0x3c, 0x62, 0x29, 0x8b, 0xad, 0x81,
	0xca, 0xfe, 0x2a, 0x2a, 0xbf, 0x8c, 0x78, 0x0e, 0xee, 0x05, 0x10, 0x80, 0x3e, 0x52, 0x75, 0xb2,
	0xd5, 0x6a, 0x00, 0x10, 0x44, 0x9c, 0xea, 0xaf, 0x6e, 0xf6, 0x91, 0xca, 0x30, 0xe6, 0x42, 0xb2,
	0x78, 0x64, 0x08, 0x87, 0x53, 0x07, 0xe1, 0xb7, 0x89, 0xd2, 0x7c, 0x9d, 0xf1, 0x8c, 0xb7, 0xcc,
	0xc4, 0xb8, 0x85, 0x76, 0x17, 0x4c, 0xd7, 0xa9, 0x39, 0xf5, 0xd2, 0x51, 0x85, 0x18, 0x2d, 0x92,
	0x6b, 0x91, 0x76, 0xce, 0x68, 0xfe, 0x7f, 0xfe, 0xab, 0x5a, 0x98, 0x5e, 0x56, 0x9d, 0xaf, 0x7f,
	0xbe, 0x3f, 0x74, 0xfc, 0xab, 0x5e, 0xdc, 0x40, 0x3b, 0x99, 0x96, 0x17, 0xee, 0x46, 0x6d, 0xb3,
	0x5e, 0x3a, 0xba, 0x4b, 0x56, 0xd6, 0x48, 0xcc, 0xf5, 0x7e, 0xce, 0x3b, 0xfc, 0x80, 0xca, 0x6d,
	0x18, 0xf2, 0x24, 0xf7, 0xb2, 0x87, 0xb6, 0xfb, 0x3c, 0x81, 0x58, 0xfb, 0xd8, 0xf5, 0xcd, 0x07,
	0x7e, 0x8a, 0xb6, 0xa5, 0x62, 0xb9, 0x1b, 0xda, 0xdd, 0x9d, 0x35, 0x59, 0xad, 0xd1, 0xdc, 0x55,
	0xce, 0x8c, 0x2b, 0xc3, 0x3f, 0xfc, 0xb1, 0x85, 0xca, 0x56, 0xfa, 0x8d, 0x64, 0x92, 0xe3, 0x67,
	0xa8, 0x68, 0xd6, 0x6c, 0x07, 0x5d, 0x77, 0x78, 0xaa, 0xe1, 0x65, 0x2d, 0xdb, 0x81, 0x4f, 0x10,
	0x1a, 0xb3, 0x28, 0xec, 0x33, 0x09, 0x69, 0x3e, 0x61, 0x65, 0xad, 0xff, 0x5d, 0x4e, 0x59, 0x96,
	0x58, 0x6a, 0xc4, 0xc7, 0xa8, 0xa8, 0xcd, 0x09, 0x77, 0x53, 0x4b, 0x1c, 0xfc, 0x7b, 0x1a, 0x6b,
	0xdb, 0xb7, 0x64, 0xfc, 0x09, 0xed, 0x88, 0x88, 0x89, 0x01, 0xef, 0xbb, 0x5b, 0xba, 0xef, 0x1e,
	0x31, 0xf9, 0x23, 0x2a, 0x7f, 0xc4, 0xe6, 0x8f, 0x3c, 0x87, 0x30, 0x69, 0x1e, 0xab, 0x9b, 0xbf,
	0x5d, 0x56, 0xeb, 0x41, 0x28, 0x07, 0x59, 0x97, 0xf4, 0x20, 0xa6, 0x36, 0xac, 0xe6, 0xef, 0xb1,
	0xe8, 0x0f, 0x6d, 0xa2, 0x54, 0x83, 0x30, 0x2e, 0xf3, 0x0b, 0x70, 0x0d, 0x95, 0xb9, 0x1c, 0x74,
	0xe4, 0xa4, 0x93, 0x40, 0xd2, 0xe3, 0xee, 0x76, 0xcd, 0xa9, 0x6f, 0xf9, 0x88, 0xcb, 0x41, 0x7b,
	0xf2, 0x4a, 0x55, 0xf0, 0xcb, 0x05, 0xe3, 0xb3, 0x8a, 0x92, 0x5b, 0xd4, 0xdb, 0xdc, 0x5f, 0x1b,
	0xe5, 0x44, 0xb5, 0xe8, 0xb4, 0x5d, 0x5b, 0x07, 0x5f, 0x94, 0x71, 0x0b, 0x95, 0x52, 0x7e, 0xc6,
	0xd2, 0x7e, 0x67, 0x04, 0x10, 0xb9, 0x3b, 0x37, 0x08, 0xf9, 0x9a, 0x73, 0x0a, 0x10, 0x5d, 0x13,
	0x4a, 0x17, 0x65, 0xfc, 0x02, 0x95, 0x4d, 0xaa, 0xac, 0xa5, 0xff, 0xf4, 0x96, 0x1e, 0xdc, 0x10,
	0xc1, 0xe5, 0x17, 0xe0, 0x97, 0xb2, 0xab, 0x5a, 0xf3, 0xe4, 0x7c, 0xe6, 0x39, 0x17, 0x33, 0xcf,
	0xf9, 0x3d, 0xf3, 0x9c, 0xe9, 0xdc, 0x2b, 0x5c, 0xcc, 0xbd, 0xc2, 0xcf, 0xb9, 0x57, 0x78, 0xff,
	0x68, 0x69, 0x9d, 0x4a, 0x35, 0xe1, 0xf2, 0x0c, 0xd2, 0xa1, 0x3e, 0xd3, 0xc9, 0xe2, 0xb1, 0xea,
	0xbd, 0x76, 0x8b, 0xfa, 0xe9, 0x3c, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x21, 0x09, 0x55,
	0x69, 0x04, 0x00, 0x00,
}

func (m *UnlockQueueGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockQueueGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnlockQueueGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unlocks) > 0 {
		for iNdEx := len(m.Unlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TokenGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenGenesis) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenGenesis) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Token.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnlockQueue) > 0 {
		for iNdEx := len(m.UnlockQueue) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnlockQueue[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size, err := m.RewardPool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.EthTxQueue.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.EthTxNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EthTxNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Slashed) > 0 {
		for iNdEx := len(m.Slashed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Slashed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UnlockQueueGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Unlocks) > 0 {
		for _, e := range m.Unlocks {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *TokenGenesis) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Token.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Slashed) > 0 {
		for _, e := range m.Slashed {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.EthTxNonce != 0 {
		n += 1 + sovGenesis(uint64(m.EthTxNonce))
	}
	l = m.EthTxQueue.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.RewardPool.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.UnlockQueue) > 0 {
		for _, e := range m.UnlockQueue {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UnlockQueueGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockQueueGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockQueueGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlocks = append(m.Unlocks, &Unlock{})
			if err := m.Unlocks[len(m.Unlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Token.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &TokenGenesis{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slashed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slashed = append(m.Slashed, types.Coin{})
			if err := m.Slashed[len(m.Slashed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthTxNonce", wireType)
			}
			m.EthTxNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EthTxNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthTxQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EthTxQueue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockQueue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockQueue = append(m.UnlockQueue, &UnlockQueueGenesis{})
			if err := m.UnlockQueue[len(m.UnlockQueue)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
