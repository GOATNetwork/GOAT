// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/locking/v1/locking.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorStatus is the status of a validator.
type ValidatorStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	Unspecified ValidatorStatus = 0
	// Pending means the validator is waitting for
	Pending ValidatorStatus = 1
	// Active means the validator is producing and voting new blocks
	Active ValidatorStatus = 2
	// Tombstoned means the validator did malicious behaviors like double sign and
	// killed out
	Tombstoned ValidatorStatus = 3
	// Downgrade means the validator is offline
	Downgrade ValidatorStatus = 4
	// Inactive means the validator is exiting in progress or exited
	Inactive ValidatorStatus = 5
)

var ValidatorStatus_name = map[int32]string{
	0: "VALIDATOR_STATUS_UNSPECIFIED",
	1: "VALIDATOR_STATUS_PENDING",
	2: "VALIDATOR_STATUS_ACTIVE",
	3: "VALIDATOR_STATUS_TOMBSTONED",
	4: "VALIDATOR_STATUS_DOWNGRADE",
	5: "VALIDATOR_STATUS_INACTIVE",
}

var ValidatorStatus_value = map[string]int32{
	"VALIDATOR_STATUS_UNSPECIFIED": 0,
	"VALIDATOR_STATUS_PENDING":     1,
	"VALIDATOR_STATUS_ACTIVE":      2,
	"VALIDATOR_STATUS_TOMBSTONED":  3,
	"VALIDATOR_STATUS_DOWNGRADE":   4,
	"VALIDATOR_STATUS_INACTIVE":    5,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aad17b4b53f2480, []int{0}
}

// SigningInfo
type SigningInfo struct {
	// offset of the current sign window
	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// missed of the current sign window
	Missed int64 `protobuf:"varint,2,opt,name=missed,proto3" json:"missed,omitempty"`
}

func (m *SigningInfo) Reset()         { *m = SigningInfo{} }
func (m *SigningInfo) String() string { return proto.CompactTextString(m) }
func (*SigningInfo) ProtoMessage()    {}
func (*SigningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aad17b4b53f2480, []int{0}
}
func (m *SigningInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningInfo.Merge(m, src)
}
func (m *SigningInfo) XXX_Size() int {
	return m.Size()
}
func (m *SigningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SigningInfo proto.InternalMessageInfo

func (m *SigningInfo) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SigningInfo) GetMissed() int64 {
	if m != nil {
		return m.Missed
	}
	return 0
}

// Validator
type Validator struct {
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Power  uint64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	// the total locking
	Locking github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=locking,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"locking"`
	// unclaimed goat reward
	Reward cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=reward,proto3,customtype=cosmossdk.io/math.Int" json:"reward"`
	// unclaimed gas fee rewrad
	GasReward   cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=gas_reward,json=gasReward,proto3,customtype=cosmossdk.io/math.Int" json:"gas_reward"`
	Status      ValidatorStatus       `protobuf:"varint,6,opt,name=status,proto3,enum=goat.locking.v1.ValidatorStatus" json:"status,omitempty"`
	SigningInfo SigningInfo           `protobuf:"bytes,7,opt,name=signing_info,json=signingInfo,proto3" json:"signing_info"`
	// Timestamp until which the validator is jailed due to liveness downtime.
	JailedUntil time.Time `protobuf:"bytes,8,opt,name=jailed_until,json=jailedUntil,proto3,stdtime" json:"jailed_until"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aad17b4b53f2480, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Validator) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Validator) GetLocking() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Locking
	}
	return nil
}

func (m *Validator) GetStatus() ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return Unspecified
}

func (m *Validator) GetSigningInfo() SigningInfo {
	if m != nil {
		return m.SigningInfo
	}
	return SigningInfo{}
}

func (m *Validator) GetJailedUntil() time.Time {
	if m != nil {
		return m.JailedUntil
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("goat.locking.v1.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*SigningInfo)(nil), "goat.locking.v1.SigningInfo")
	proto.RegisterType((*Validator)(nil), "goat.locking.v1.Validator")
}

func init() { proto.RegisterFile("goat/locking/v1/locking.proto", fileDescriptor_3aad17b4b53f2480) }

var fileDescriptor_3aad17b4b53f2480 = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x4f, 0xdb, 0x48,
	0x14, 0x8f, 0x49, 0x08, 0x64, 0x12, 0x20, 0x6b, 0xb1, 0xbb, 0xc6, 0xcb, 0x3a, 0x16, 0x97, 0xcd,
	0x82, 0xb0, 0x15, 0x56, 0x2b, 0xf5, 0xd2, 0x43, 0xfe, 0x15, 0x19, 0xd1, 0x04, 0x39, 0x0e, 0x95,
	0x7a, 0x89, 0x26, 0xf1, 0xc4, 0x0c, 0x89, 0x67, 0xa2, 0xcc, 0x24, 0x29, 0xdf, 0xa0, 0xca, 0x89,
	0x2f, 0x90, 0x53, 0x2f, 0x55, 0x7b, 0xe9, 0xa1, 0x1f, 0x82, 0x23, 0xea, 0xa9, 0xea, 0x01, 0x2a,
	0x38, 0xf4, 0x6b, 0x54, 0xb6, 0x27, 0x08, 0x91, 0x53, 0x2f, 0xf6, 0xfc, 0xde, 0xfb, 0xfd, 0x7e,
	0x7e, 0x6f, 0xde, 0x93, 0xc1, 0xdf, 0x1e, 0x85, 0xdc, 0xec, 0xd3, 0x4e, 0x0f, 0x13, 0xcf, 0x1c,
	0x17, 0xe6, 0x47, 0x63, 0x30, 0xa4, 0x9c, 0xca, 0x1b, 0x41, 0xda, 0x98, 0xc7, 0xc6, 0x05, 0xf5,
	0x37, 0xe8, 0x63, 0x42, 0xcd, 0xf0, 0x19, 0x71, 0x54, 0xad, 0x43, 0x99, 0x4f, 0x99, 0xd9, 0x86,
	0x0c, 0x99, 0xe3, 0x42, 0x1b, 0x71, 0x58, 0x30, 0x3b, 0x14, 0x13, 0x91, 0xdf, 0x8a, 0xf2, 0xad,
	0x10, 0x99, 0x11, 0x10, 0xa9, 0x4d, 0x8f, 0x7a, 0x34, 0x8a, 0x07, 0x27, 0x11, 0xcd, 0x79, 0x94,
	0x7a, 0x7d, 0x64, 0x86, 0xa8, 0x3d, 0xea, 0x9a, 0x1c, 0xfb, 0x88, 0x71, 0xe8, 0x0f, 0x22, 0xc2,
	0xce, 0x73, 0x90, 0x6e, 0x60, 0x8f, 0x60, 0xe2, 0x59, 0xa4, 0x4b, 0xe5, 0x3f, 0x40, 0x92, 0x76,
	0xbb, 0x0c, 0x71, 0x45, 0xd2, 0xa5, 0x7c, 0xdc, 0x16, 0x28, 0x88, 0xfb, 0x98, 0x31, 0xe4, 0x2a,
	0x4b, 0x51, 0x3c, 0x42, 0x3b, 0xd3, 0x04, 0x48, 0x9d, 0xc2, 0x3e, 0x76, 0x21, 0xa7, 0xc3, 0x80,
	0x35, 0x18, 0xb5, 0x7b, 0xe8, 0x22, 0x54, 0x67, 0x6c, 0x81, 0xe4, 0x4d, 0xb0, 0x3c, 0xa0, 0x13,
	0x34, 0x0c, 0xc5, 0x09, 0x3b, 0x02, 0xf2, 0x39, 0x58, 0x11, 0xb7, 0xa1, 0xc4, 0xf5, 0x78, 0x3e,
	0x7d, 0xb0, 0x65, 0x88, 0x8e, 0x82, 0xf6, 0x0d, 0xd1, 0xbe, 0x51, 0xa6, 0x98, 0x94, 0xfe, 0xbf,
	0xba, 0xc9, 0xc5, 0x3e, 0xdc, 0xe6, 0xf2, 0x1e, 0xe6, 0x67, 0xa3, 0xb6, 0xd1, 0xa1, 0xbe, 0x68,
	0x5f, 0xbc, 0xf6, 0x99, 0xdb, 0x33, 0xf9, 0xc5, 0x00, 0xb1, 0x50, 0xc0, 0xde, 0xff, 0xf8, 0xb4,
	0x2b, 0xd9, 0xf3, 0x0f, 0xc8, 0x65, 0x90, 0x1c, 0xa2, 0x09, 0x1c, 0xba, 0x4a, 0x42, 0x97, 0xf2,
	0xa9, 0xd2, 0x5e, 0xe0, 0xf7, 0xed, 0x26, 0xf7, 0x7b, 0xa4, 0x66, 0x6e, 0xcf, 0xc0, 0xd4, 0xf4,
	0x21, 0x3f, 0x33, 0x2c, 0xc2, 0xbf, 0x7c, 0xde, 0x07, 0xa2, 0x14, 0x8b, 0x70, 0x5b, 0x48, 0xe5,
	0x23, 0x00, 0x3c, 0xc8, 0x5a, 0xc2, 0x68, 0xf9, 0xd7, 0x8d, 0x52, 0x1e, 0x64, 0x76, 0xe4, 0xf5,
	0x0c, 0x24, 0x19, 0x87, 0x7c, 0xc4, 0x94, 0xa4, 0x2e, 0xe5, 0xd7, 0x0f, 0x74, 0xe3, 0xc9, 0x7a,
	0x18, 0x0f, 0xd7, 0xda, 0x08, 0x79, 0xb6, 0xe0, 0xcb, 0x47, 0x20, 0xc3, 0xa2, 0x89, 0xb5, 0x30,
	0xe9, 0x52, 0x65, 0x45, 0x97, 0xf2, 0xe9, 0x83, 0xed, 0x05, 0xfd, 0xa3, 0xb1, 0x96, 0x52, 0x41,
	0x95, 0xd1, 0x95, 0xa4, 0xd9, 0xa3, 0x71, 0x1f, 0x83, 0xcc, 0x39, 0xc4, 0x7d, 0xe4, 0xb6, 0x46,
	0x84, 0xe3, 0xbe, 0xb2, 0x1a, 0x7a, 0xa9, 0x46, 0xb4, 0x35, 0xc6, 0x7c, 0x6b, 0x0c, 0x67, 0xbe,
	0x35, 0xa5, 0xb5, 0xc0, 0xe9, 0xf2, 0x36, 0x27, 0x09, 0xb7, 0x48, 0xde, 0x0c, 0xd4, 0xbb, 0x1f,
	0x97, 0xc0, 0xc6, 0x93, 0xaa, 0xe5, 0x02, 0xd8, 0x3e, 0x2d, 0x1e, 0x5b, 0x95, 0xa2, 0x53, 0xb7,
	0x5b, 0x0d, 0xa7, 0xe8, 0x34, 0x1b, 0xad, 0x66, 0xad, 0x71, 0x52, 0x2d, 0x5b, 0x2f, 0xac, 0x6a,
	0x25, 0x1b, 0x53, 0x37, 0xa6, 0x33, 0x3d, 0xdd, 0x24, 0x6c, 0x80, 0x3a, 0xb8, 0x8b, 0x91, 0x2b,
	0xff, 0x0b, 0x94, 0x05, 0xc9, 0x49, 0xb5, 0x56, 0xb1, 0x6a, 0x87, 0x59, 0x49, 0x4d, 0x4f, 0x67,
	0xfa, 0xca, 0x09, 0x22, 0x6e, 0x30, 0xd6, 0x7f, 0xc0, 0x9f, 0x0b, 0xd4, 0x62, 0xd9, 0xb1, 0x4e,
	0xab, 0xd9, 0x25, 0x15, 0x4c, 0x67, 0x7a, 0xb2, 0xd8, 0xe1, 0x78, 0x8c, 0x64, 0x13, 0xfc, 0xb5,
	0x40, 0x74, 0xea, 0x2f, 0x4b, 0x0d, 0xa7, 0x5e, 0xab, 0x56, 0xb2, 0x71, 0x75, 0x7d, 0x3a, 0xd3,
	0x81, 0x43, 0xfd, 0x36, 0xe3, 0x94, 0x20, 0x57, 0xde, 0x07, 0xea, 0x82, 0xa0, 0x52, 0x7f, 0x55,
	0x3b, 0xb4, 0x8b, 0x95, 0x6a, 0x36, 0xa1, 0xae, 0x4d, 0x67, 0x7a, 0xaa, 0x42, 0x27, 0xc4, 0x1b,
	0x42, 0x17, 0xc9, 0x7b, 0x60, 0x6b, 0x81, 0x6e, 0xd5, 0x44, 0x29, 0xcb, 0x6a, 0x66, 0x3a, 0xd3,
	0x57, 0x2d, 0x02, 0xc3, 0x62, 0xd4, 0xc4, 0xdb, 0x77, 0x5a, 0xac, 0x54, 0xbd, 0xba, 0xd3, 0xa4,
	0xeb, 0x3b, 0x4d, 0xfa, 0x7e, 0xa7, 0x49, 0x97, 0xf7, 0x5a, 0xec, 0xfa, 0x5e, 0x8b, 0x7d, 0xbd,
	0xd7, 0x62, 0xaf, 0xf7, 0x1e, 0x2d, 0x79, 0x30, 0x55, 0x82, 0xf8, 0x84, 0x0e, 0x7b, 0xe1, 0xd9,
	0x7c, 0xf3, 0xf0, 0x87, 0x09, 0xb7, 0xbd, 0x9d, 0x0c, 0x87, 0xf4, 0xdf, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xfa, 0xbc, 0xd7, 0x3b, 0x7e, 0x04, 0x00, 0x00,
}

func (m *SigningInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Missed != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Missed))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.JailedUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JailedUntil):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLocking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	{
		size, err := m.SigningInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Status != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.GasReward.Size()
		i -= size
		if _, err := m.GasReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Reward.Size()
		i -= size
		if _, err := m.Reward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Locking) > 0 {
		for iNdEx := len(m.Locking) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locking[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Power != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SigningInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovLocking(uint64(m.Offset))
	}
	if m.Missed != 0 {
		n += 1 + sovLocking(uint64(m.Missed))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovLocking(uint64(m.Power))
	}
	if len(m.Locking) > 0 {
		for _, e := range m.Locking {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	l = m.Reward.Size()
	n += 1 + l + sovLocking(uint64(l))
	l = m.GasReward.Size()
	n += 1 + l + sovLocking(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLocking(uint64(m.Status))
	}
	l = m.SigningInfo.Size()
	n += 1 + l + sovLocking(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JailedUntil)
	n += 1 + l + sovLocking(uint64(l))
	return n
}

func sovLocking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocking(x uint64) (n int) {
	return sovLocking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SigningInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Missed", wireType)
			}
			m.Missed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Missed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locking = append(m.Locking, types.Coin{})
			if err := m.Locking[len(m.Locking)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SigningInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.JailedUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocking = fmt.Errorf("proto: unexpected end of group")
)
