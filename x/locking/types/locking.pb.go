// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: goat/locking/v1/locking.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorStatus is the status of a validator.
type ValidatorStatus int32

const (
	// UNSPECIFIED defines an invalid validator status.
	ValidatorStatus_Unspecified ValidatorStatus = 0
	// Pending means the validator is waitting for
	ValidatorStatus_Pending ValidatorStatus = 1
	// Active means the validator is producing and voting new blocks
	ValidatorStatus_Active ValidatorStatus = 2
	// Tombstoned means the validator did malicious behaviors like double sign and
	// killed out
	ValidatorStatus_Tombstoned ValidatorStatus = 3
	// Downgrade means the validator is offline
	ValidatorStatus_Downgrade ValidatorStatus = 4
	// Inactive means the validator is exiting in progress or exited
	ValidatorStatus_Inactive ValidatorStatus = 5
)

var ValidatorStatus_name = map[int32]string{
	0: "VALIDATOR_STATUS_UNSPECIFIED",
	1: "VALIDATOR_STATUS_PENDING",
	2: "VALIDATOR_STATUS_ACTIVE",
	3: "VALIDATOR_STATUS_TOMBSTONED",
	4: "VALIDATOR_STATUS_DOWNGRADE",
	5: "VALIDATOR_STATUS_INACTIVE",
}

var ValidatorStatus_value = map[string]int32{
	"VALIDATOR_STATUS_UNSPECIFIED": 0,
	"VALIDATOR_STATUS_PENDING":     1,
	"VALIDATOR_STATUS_ACTIVE":      2,
	"VALIDATOR_STATUS_TOMBSTONED":  3,
	"VALIDATOR_STATUS_DOWNGRADE":   4,
	"VALIDATOR_STATUS_INACTIVE":    5,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3aad17b4b53f2480, []int{0}
}

// Validator
type Validator struct {
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Power  uint64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	// the total locking
	Locking github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=locking,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"locking"`
	// unclaimed goat reward
	GoatReward cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=goat_reward,json=goatReward,proto3,customtype=cosmossdk.io/math.Int" json:"goat_reward"`
	// unclaimed gas fee rewrad
	GasReward cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=gas_reward,json=gasReward,proto3,customtype=cosmossdk.io/math.Int" json:"gas_reward"`
	Status    ValidatorStatus       `protobuf:"varint,6,opt,name=status,proto3,enum=goat.locking.v1.ValidatorStatus" json:"status,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aad17b4b53f2480, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Validator) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Validator) GetLocking() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Locking
	}
	return nil
}

func (m *Validator) GetStatus() ValidatorStatus {
	if m != nil {
		return m.Status
	}
	return ValidatorStatus_Unspecified
}

// SigningInfo
type SigningInfo struct {
	// Height at which validator was first a candidate OR was un-jailed
	StartHeight int64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// Timestamp until which the validator is jailed due to liveness downtime.
	JailedUntil time.Time `protobuf:"bytes,4,opt,name=jailed_until,json=jailedUntil,proto3,stdtime" json:"jailed_until"`
	// Whether or not a validator has been tombstoned (killed out of validator
	// set). It is set once the validator commits an equivocation or for any other
	// configured misbehavior.
	Tombstoned bool `protobuf:"varint,5,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	// A counter of missed (unsigned) blocks. It is used to avoid unnecessary
	// reads in the missed block bitmap.
	MissedBlocksCounter int64 `protobuf:"varint,6,opt,name=missed_blocks_counter,json=missedBlocksCounter,proto3" json:"missed_blocks_counter,omitempty"`
}

func (m *SigningInfo) Reset()         { *m = SigningInfo{} }
func (m *SigningInfo) String() string { return proto.CompactTextString(m) }
func (*SigningInfo) ProtoMessage()    {}
func (*SigningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aad17b4b53f2480, []int{1}
}
func (m *SigningInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningInfo.Merge(m, src)
}
func (m *SigningInfo) XXX_Size() int {
	return m.Size()
}
func (m *SigningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SigningInfo proto.InternalMessageInfo

func (m *SigningInfo) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *SigningInfo) GetJailedUntil() time.Time {
	if m != nil {
		return m.JailedUntil
	}
	return time.Time{}
}

func (m *SigningInfo) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *SigningInfo) GetMissedBlocksCounter() int64 {
	if m != nil {
		return m.MissedBlocksCounter
	}
	return 0
}

func init() {
	proto.RegisterEnum("goat.locking.v1.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*Validator)(nil), "goat.locking.v1.Validator")
	proto.RegisterType((*SigningInfo)(nil), "goat.locking.v1.SigningInfo")
}

func init() { proto.RegisterFile("goat/locking/v1/locking.proto", fileDescriptor_3aad17b4b53f2480) }

var fileDescriptor_3aad17b4b53f2480 = []byte{
	// 735 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0x8e, 0x93, 0x34, 0xf7, 0x66, 0x9c, 0x7b, 0x1b, 0xcc, 0xbd, 0x90, 0x1a, 0x70, 0xcc, 0xdd,
	0x10, 0x6e, 0x55, 0x5b, 0x09, 0x42, 0x42, 0xec, 0xf2, 0x47, 0x31, 0x2a, 0x49, 0xe5, 0x38, 0x45,
	0x62, 0x63, 0x8d, 0xe3, 0xa9, 0x33, 0x4d, 0x3c, 0x13, 0x79, 0x26, 0x09, 0x7d, 0x85, 0xac, 0xfa,
	0x02, 0x91, 0xd8, 0x20, 0x21, 0x56, 0x2c, 0x78, 0x88, 0x2e, 0x2b, 0x56, 0x15, 0x8b, 0x16, 0xb5,
	0x0b, 0x78, 0x05, 0x76, 0xc8, 0x63, 0xa7, 0x54, 0xcd, 0x8a, 0x4d, 0x32, 0xe7, 0x9c, 0xef, 0x3b,
	0xf9, 0xce, 0x77, 0x66, 0x02, 0x3e, 0x0a, 0x28, 0xe4, 0xe6, 0x94, 0x8e, 0x26, 0x98, 0x04, 0xe6,
	0xa2, 0xbe, 0x39, 0x1a, 0xb3, 0x88, 0x72, 0xaa, 0xec, 0xc6, 0x65, 0x63, 0x93, 0x5b, 0xd4, 0xd5,
	0x77, 0x60, 0x88, 0x09, 0x35, 0xc5, 0x67, 0x82, 0x51, 0xb5, 0x11, 0x65, 0x21, 0x65, 0xa6, 0x07,
	0x19, 0x32, 0x17, 0x75, 0x0f, 0x71, 0x58, 0x37, 0x47, 0x14, 0x93, 0xb4, 0xbe, 0x97, 0xd4, 0x5d,
	0x11, 0x99, 0x49, 0x90, 0x96, 0x5e, 0x05, 0x34, 0xa0, 0x49, 0x3e, 0x3e, 0xa5, 0xd9, 0x6a, 0x40,
	0x69, 0x30, 0x45, 0xa6, 0x88, 0xbc, 0xf9, 0xa9, 0xc9, 0x71, 0x88, 0x18, 0x87, 0xe1, 0x2c, 0x01,
	0xbc, 0xf9, 0x27, 0x0b, 0x8a, 0x27, 0x70, 0x8a, 0x7d, 0xc8, 0x69, 0xa4, 0xbc, 0x07, 0x0a, 0xb3,
	0xb9, 0x37, 0x41, 0xe7, 0x15, 0x49, 0x97, 0x6a, 0x25, 0x3b, 0x8d, 0x94, 0x57, 0x60, 0x67, 0x46,
	0x97, 0x28, 0xaa, 0x64, 0x75, 0xa9, 0x96, 0xb7, 0x93, 0x40, 0x39, 0x03, 0xcf, 0xd2, 0x71, 0x2a,
	0x39, 0x3d, 0x57, 0x93, 0x1b, 0x7b, 0x46, 0x2a, 0x29, 0xd6, 0x6f, 0xa4, 0xfa, 0x8d, 0x36, 0xc5,
	0xa4, 0xf5, 0xf9, 0xe5, 0x4d, 0x35, 0xf3, 0xcb, 0x6d, 0xb5, 0x16, 0x60, 0x3e, 0x9e, 0x7b, 0xc6,
	0x88, 0x86, 0xa9, 0xfe, 0xf4, 0xeb, 0x80, 0xf9, 0x13, 0x93, 0x9f, 0xcf, 0x10, 0x13, 0x04, 0xf6,
	0xf3, 0x5f, 0xbf, 0xbe, 0x95, 0xec, 0xcd, 0x0f, 0x28, 0x47, 0x40, 0x8e, 0xfd, 0x73, 0x23, 0xb4,
	0x84, 0x91, 0x5f, 0xc9, 0xeb, 0x52, 0xad, 0xd8, 0xda, 0x8f, 0x9b, 0xfe, 0x71, 0x53, 0x7d, 0x9d,
	0xb4, 0x60, 0xfe, 0xc4, 0xc0, 0xd4, 0x0c, 0x21, 0x1f, 0x1b, 0x16, 0xe1, 0xbf, 0xff, 0x76, 0x00,
	0x52, 0x3d, 0x16, 0xe1, 0x36, 0x88, 0xf9, 0xb6, 0xa0, 0x2b, 0xdf, 0x00, 0x10, 0x40, 0xb6, 0x69,
	0xb6, 0xf3, 0xff, 0x9b, 0x15, 0x03, 0xc8, 0xd2, 0x5e, 0x5f, 0x80, 0x02, 0xe3, 0x90, 0xcf, 0x59,
	0xa5, 0xa0, 0x4b, 0xb5, 0x97, 0x0d, 0xdd, 0x78, 0xb2, 0x68, 0xe3, 0xc1, 0xdf, 0x81, 0xc0, 0xd9,
	0x29, 0xfe, 0xcd, 0xb5, 0x04, 0xe4, 0x01, 0x0e, 0x08, 0x26, 0x81, 0x45, 0x4e, 0xa9, 0xf2, 0x31,
	0x28, 0x31, 0x0e, 0x23, 0xee, 0x8e, 0x11, 0x0e, 0xc6, 0x5c, 0x98, 0x9d, 0xb3, 0x65, 0x91, 0xfb,
	0x5a, 0xa4, 0x94, 0x23, 0x50, 0x3a, 0x83, 0x78, 0x8a, 0x7c, 0x77, 0x4e, 0x38, 0x9e, 0x0a, 0x1f,
	0xe4, 0x86, 0x6a, 0x24, 0x6b, 0x36, 0x36, 0x6b, 0x36, 0x9c, 0xcd, 0x9a, 0x5b, 0x2f, 0xe2, 0xb1,
	0x2e, 0x6e, 0xab, 0x52, 0x62, 0xa8, 0x9c, 0xd0, 0x87, 0x31, 0x5b, 0xd1, 0x00, 0xe0, 0x34, 0xf4,
	0x18, 0xa7, 0x04, 0x25, 0x36, 0x3c, 0xb7, 0x1f, 0x65, 0x94, 0x06, 0x78, 0x1d, 0x62, 0xc6, 0x90,
	0xef, 0x7a, 0xf1, 0x38, 0xcc, 0x1d, 0xd1, 0x39, 0xe1, 0x28, 0x12, 0x93, 0xe6, 0xec, 0x77, 0x93,
	0x62, 0x4b, 0xd4, 0xda, 0x49, 0xe9, 0xcb, 0xfc, 0xdf, 0x3f, 0x56, 0xa5, 0xb7, 0x3f, 0x65, 0xc1,
	0xee, 0x93, 0xb1, 0x95, 0x3a, 0xf8, 0xf0, 0xa4, 0x79, 0x64, 0x75, 0x9a, 0x4e, 0xdf, 0x76, 0x07,
	0x4e, 0xd3, 0x19, 0x0e, 0xdc, 0x61, 0x6f, 0x70, 0xdc, 0x6d, 0x5b, 0x5f, 0x59, 0xdd, 0x4e, 0x39,
	0xa3, 0xee, 0xae, 0xd6, 0xba, 0x3c, 0x24, 0x6c, 0x86, 0x46, 0xf8, 0x14, 0x23, 0x5f, 0xf9, 0x14,
	0x54, 0xb6, 0x28, 0xc7, 0xdd, 0x5e, 0xc7, 0xea, 0x1d, 0x96, 0x25, 0x55, 0x5e, 0xad, 0xf5, 0x67,
	0xc7, 0x88, 0xf8, 0xf1, 0x05, 0xf9, 0x04, 0xbc, 0xbf, 0x05, 0x6d, 0xb6, 0x1d, 0xeb, 0xa4, 0x5b,
	0xce, 0xaa, 0x60, 0xb5, 0xd6, 0x0b, 0xcd, 0x11, 0xc7, 0x0b, 0xa4, 0x98, 0xe0, 0x83, 0x2d, 0xa0,
	0xd3, 0xff, 0xb6, 0x35, 0x70, 0xfa, 0xbd, 0x6e, 0xa7, 0x9c, 0x53, 0x5f, 0xae, 0xd6, 0x3a, 0x70,
	0xfe, 0x73, 0xe1, 0x00, 0xa8, 0x5b, 0x84, 0x4e, 0xff, 0xbb, 0xde, 0xa1, 0xdd, 0xec, 0x74, 0xcb,
	0x79, 0xf5, 0xc5, 0x6a, 0xad, 0x17, 0x3b, 0x74, 0x49, 0x82, 0x08, 0xfa, 0x48, 0xd9, 0x07, 0x7b,
	0x5b, 0x70, 0xab, 0x97, 0x4a, 0xd9, 0x51, 0x4b, 0xab, 0xb5, 0xfe, 0xdc, 0x22, 0x50, 0x88, 0x69,
	0x75, 0x2f, 0xef, 0x34, 0xe9, 0xea, 0x4e, 0x93, 0xfe, 0xbc, 0xd3, 0xa4, 0x8b, 0x7b, 0x2d, 0x73,
	0x75, 0xaf, 0x65, 0xae, 0xef, 0xb5, 0xcc, 0xf7, 0xfb, 0x8f, 0x1e, 0x4a, 0x7c, 0xa1, 0x08, 0xe2,
	0x4b, 0x1a, 0x4d, 0xc4, 0xd9, 0xfc, 0xe1, 0xe1, 0x6f, 0x46, 0xbc, 0x18, 0xaf, 0x20, 0x16, 0xff,
	0xd9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xc8, 0x6c, 0x93, 0x83, 0x04, 0x00, 0x00,
}

func (this *SigningInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SigningInfo)
	if !ok {
		that2, ok := that.(SigningInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartHeight != that1.StartHeight {
		return false
	}
	if !this.JailedUntil.Equal(that1.JailedUntil) {
		return false
	}
	if this.Tombstoned != that1.Tombstoned {
		return false
	}
	if this.MissedBlocksCounter != that1.MissedBlocksCounter {
		return false
	}
	return true
}
func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.GasReward.Size()
		i -= size
		if _, err := m.GasReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.GoatReward.Size()
		i -= size
		if _, err := m.GoatReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLocking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Locking) > 0 {
		for iNdEx := len(m.Locking) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locking[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Power != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintLocking(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissedBlocksCounter != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.MissedBlocksCounter))
		i--
		dAtA[i] = 0x30
	}
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.JailedUntil, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JailedUntil):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLocking(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.StartHeight != 0 {
		i = encodeVarintLocking(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovLocking(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovLocking(uint64(m.Power))
	}
	if len(m.Locking) > 0 {
		for _, e := range m.Locking {
			l = e.Size()
			n += 1 + l + sovLocking(uint64(l))
		}
	}
	l = m.GoatReward.Size()
	n += 1 + l + sovLocking(uint64(l))
	l = m.GasReward.Size()
	n += 1 + l + sovLocking(uint64(l))
	if m.Status != 0 {
		n += 1 + sovLocking(uint64(m.Status))
	}
	return n
}

func (m *SigningInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartHeight != 0 {
		n += 1 + sovLocking(uint64(m.StartHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.JailedUntil)
	n += 1 + l + sovLocking(uint64(l))
	if m.Tombstoned {
		n += 2
	}
	if m.MissedBlocksCounter != 0 {
		n += 1 + sovLocking(uint64(m.MissedBlocksCounter))
	}
	return n
}

func sovLocking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocking(x uint64) (n int) {
	return sovLocking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locking", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locking = append(m.Locking, types.Coin{})
			if err := m.Locking[len(m.Locking)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoatReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GoatReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.JailedUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocksCounter", wireType)
			}
			m.MissedBlocksCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedBlocksCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocking = fmt.Errorf("proto: unexpected end of group")
)
