// Code generated by MockGen. DO NOT EDIT.
// Source: x/goat/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/goat/types/expected_keepers.go -destination=testutil/mock/locking_keeper.go -package=mock -exclude_interfaces RelayerKeeper,BitcoinKeeper,AccountKeeper LockingKeeper
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	goattypes "github.com/ethereum/go-ethereum/core/types/goattypes"
	gomock "go.uber.org/mock/gomock"
)

// MockLockingKeeper is a mock of LockingKeeper interface.
type MockLockingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockLockingKeeperMockRecorder
	isgomock struct{}
}

// MockLockingKeeperMockRecorder is the mock recorder for MockLockingKeeper.
type MockLockingKeeperMockRecorder struct {
	mock *MockLockingKeeper
}

// NewMockLockingKeeper creates a new mock instance.
func NewMockLockingKeeper(ctrl *gomock.Controller) *MockLockingKeeper {
	mock := &MockLockingKeeper{ctrl: ctrl}
	mock.recorder = &MockLockingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockingKeeper) EXPECT() *MockLockingKeeperMockRecorder {
	return m.recorder
}

// DequeueLockingModuleTx mocks base method.
func (m *MockLockingKeeper) DequeueLockingModuleTx(ctx context.Context) ([]*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueLockingModuleTx", ctx)
	ret0, _ := ret[0].([]*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueLockingModuleTx indicates an expected call of DequeueLockingModuleTx.
func (mr *MockLockingKeeperMockRecorder) DequeueLockingModuleTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueLockingModuleTx", reflect.TypeOf((*MockLockingKeeper)(nil).DequeueLockingModuleTx), ctx)
}

// ProcessLockingRequest mocks base method.
func (m *MockLockingKeeper) ProcessLockingRequest(ctx context.Context, req goattypes.LockingRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessLockingRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessLockingRequest indicates an expected call of ProcessLockingRequest.
func (mr *MockLockingKeeperMockRecorder) ProcessLockingRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessLockingRequest", reflect.TypeOf((*MockLockingKeeper)(nil).ProcessLockingRequest), ctx, req)
}
