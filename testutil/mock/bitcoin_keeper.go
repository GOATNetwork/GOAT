// Code generated by MockGen. DO NOT EDIT.
// Source: x/goat/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/goat/types/expected_keepers.go -destination=testutil/mock/bitcoin_keeper.go -package=mock -exclude_interfaces LockingKeeper,RelayerKeeper,AccountKeeper BitcoinKeeper
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/ethereum/go-ethereum/core/types"
	goattypes "github.com/ethereum/go-ethereum/core/types/goattypes"
	gomock "go.uber.org/mock/gomock"
)

// MockBitcoinKeeper is a mock of BitcoinKeeper interface.
type MockBitcoinKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBitcoinKeeperMockRecorder
	isgomock struct{}
}

// MockBitcoinKeeperMockRecorder is the mock recorder for MockBitcoinKeeper.
type MockBitcoinKeeperMockRecorder struct {
	mock *MockBitcoinKeeper
}

// NewMockBitcoinKeeper creates a new mock instance.
func NewMockBitcoinKeeper(ctrl *gomock.Controller) *MockBitcoinKeeper {
	mock := &MockBitcoinKeeper{ctrl: ctrl}
	mock.recorder = &MockBitcoinKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitcoinKeeper) EXPECT() *MockBitcoinKeeperMockRecorder {
	return m.recorder
}

// DequeueBitcoinModuleTx mocks base method.
func (m *MockBitcoinKeeper) DequeueBitcoinModuleTx(ctx context.Context) ([]*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueBitcoinModuleTx", ctx)
	ret0, _ := ret[0].([]*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueBitcoinModuleTx indicates an expected call of DequeueBitcoinModuleTx.
func (mr *MockBitcoinKeeperMockRecorder) DequeueBitcoinModuleTx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueBitcoinModuleTx", reflect.TypeOf((*MockBitcoinKeeper)(nil).DequeueBitcoinModuleTx), ctx)
}

// ProcessBridgeRequest mocks base method.
func (m *MockBitcoinKeeper) ProcessBridgeRequest(ctx context.Context, req goattypes.BridgeRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBridgeRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBridgeRequest indicates an expected call of ProcessBridgeRequest.
func (mr *MockBitcoinKeeperMockRecorder) ProcessBridgeRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBridgeRequest", reflect.TypeOf((*MockBitcoinKeeper)(nil).ProcessBridgeRequest), ctx, req)
}
