// Code generated by MockGen. DO NOT EDIT.
// Source: x/goat/types/expected_keepers.go
//
// Generated by this command:
//
//	mockgen -source=x/goat/types/expected_keepers.go -destination=testutil/mock/relayer_keeper.go -package=mock -exclude_interfaces LockingKeeper,BitcoinKeeper,AccountKeeper RelayerKeeper
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	goattypes "github.com/ethereum/go-ethereum/core/types/goattypes"
	types0 "github.com/goatnetwork/goat/x/relayer/types"
	gomock "go.uber.org/mock/gomock"
)

// MockRelayerKeeper is a mock of RelayerKeeper interface.
type MockRelayerKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockRelayerKeeperMockRecorder
	isgomock struct{}
}

// MockRelayerKeeperMockRecorder is the mock recorder for MockRelayerKeeper.
type MockRelayerKeeperMockRecorder struct {
	mock *MockRelayerKeeper
}

// NewMockRelayerKeeper creates a new mock instance.
func NewMockRelayerKeeper(ctrl *gomock.Controller) *MockRelayerKeeper {
	mock := &MockRelayerKeeper{ctrl: ctrl}
	mock.recorder = &MockRelayerKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelayerKeeper) EXPECT() *MockRelayerKeeperMockRecorder {
	return m.recorder
}

// AddNewKey mocks base method.
func (m *MockRelayerKeeper) AddNewKey(ctx context.Context, raw []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewKey", ctx, raw)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewKey indicates an expected call of AddNewKey.
func (mr *MockRelayerKeeperMockRecorder) AddNewKey(ctx, raw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewKey", reflect.TypeOf((*MockRelayerKeeper)(nil).AddNewKey), ctx, raw)
}

// GetCurrentProposer mocks base method.
func (m *MockRelayerKeeper) GetCurrentProposer(ctx context.Context) (types.AccAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentProposer", ctx)
	ret0, _ := ret[0].(types.AccAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentProposer indicates an expected call of GetCurrentProposer.
func (mr *MockRelayerKeeperMockRecorder) GetCurrentProposer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentProposer", reflect.TypeOf((*MockRelayerKeeper)(nil).GetCurrentProposer), ctx)
}

// HasPubkey mocks base method.
func (m *MockRelayerKeeper) HasPubkey(ctx context.Context, raw []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPubkey", ctx, raw)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPubkey indicates an expected call of HasPubkey.
func (mr *MockRelayerKeeperMockRecorder) HasPubkey(ctx, raw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPubkey", reflect.TypeOf((*MockRelayerKeeper)(nil).HasPubkey), ctx, raw)
}

// ProcessRelayerRequest mocks base method.
func (m *MockRelayerKeeper) ProcessRelayerRequest(ctx context.Context, req goattypes.RelayerRequests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRelayerRequest", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessRelayerRequest indicates an expected call of ProcessRelayerRequest.
func (mr *MockRelayerKeeperMockRecorder) ProcessRelayerRequest(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRelayerRequest", reflect.TypeOf((*MockRelayerKeeper)(nil).ProcessRelayerRequest), ctx, req)
}

// SetProposalSeq mocks base method.
func (m *MockRelayerKeeper) SetProposalSeq(ctx context.Context, seq uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProposalSeq", ctx, seq)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProposalSeq indicates an expected call of SetProposalSeq.
func (mr *MockRelayerKeeperMockRecorder) SetProposalSeq(ctx, seq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProposalSeq", reflect.TypeOf((*MockRelayerKeeper)(nil).SetProposalSeq), ctx, seq)
}

// UpdateRandao mocks base method.
func (m *MockRelayerKeeper) UpdateRandao(ctx context.Context, req types0.IVoteMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRandao", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRandao indicates an expected call of UpdateRandao.
func (mr *MockRelayerKeeperMockRecorder) UpdateRandao(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRandao", reflect.TypeOf((*MockRelayerKeeper)(nil).UpdateRandao), ctx, req)
}

// VerifyNonProposal mocks base method.
func (m *MockRelayerKeeper) VerifyNonProposal(ctx context.Context, req types0.INonVoteMsg) (types0.IRelayer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyNonProposal", ctx, req)
	ret0, _ := ret[0].(types0.IRelayer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyNonProposal indicates an expected call of VerifyNonProposal.
func (mr *MockRelayerKeeperMockRecorder) VerifyNonProposal(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyNonProposal", reflect.TypeOf((*MockRelayerKeeper)(nil).VerifyNonProposal), ctx, req)
}

// VerifyProposal mocks base method.
func (m *MockRelayerKeeper) VerifyProposal(ctx context.Context, req types0.IVoteMsg, verifyFn ...func([]byte) error) (uint64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range verifyFn {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyProposal", varargs...)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyProposal indicates an expected call of VerifyProposal.
func (mr *MockRelayerKeeperMockRecorder) VerifyProposal(ctx, req any, verifyFn ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, verifyFn...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyProposal", reflect.TypeOf((*MockRelayerKeeper)(nil).VerifyProposal), varargs...)
}
